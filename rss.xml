<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>I'm company</title><link>http://blog.imcompany.cn/</link><description>把知识用起来最好的方法就是：减少关注方向，经常记录，定期思考，反复实践，不把信息当作知识，不把收藏当作学习，不把阅读当作思考，不把储存当作掌握。 不提炼总结、不应用学习、不深入思考、不实践反馈，就不会变成自己的能力。———warfalcon</description><atom:link href="http://blog.imcompany.cn/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2019 &lt;a href="mailto:peng051410@gmail.comjoe@demo.site"&gt;Tomyli&lt;/a&gt; </copyright><lastBuildDate>Thu, 07 Mar 2019 09:39:10 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>那些提高效率的命令行工具</title><link>http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-ming-ling-xing-gong-ju/</link><dc:creator>Tomyli</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-org2ed6c3b" class="outline-2"&gt;
&lt;h2 id="org2ed6c3b"&gt;&lt;a id="ID-CE339CBF-93D7-4592-B7EB-E1BC98397C4C"&gt;&lt;/a&gt;Brew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2ed6c3b"&gt;
&lt;p&gt;
Mac软件包管理工具。用命令行命令来安装软件，仓库软件丰富。&lt;a href="https://github.com/Homebrew/brew"&gt;地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4f931fc" class="outline-2"&gt;
&lt;h2 id="org4f931fc"&gt;&lt;a id="ID-E636FFF8-C689-45E3-87D1-9ADD6B27D3B0"&gt;&lt;/a&gt;bat&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4f931fc"&gt;
&lt;p&gt;
bat? No，高端cat，不费眼。带颜色显示，支持git状态，自动分页。&lt;a href="https://github.com/sharkdp/bat"&gt;地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org999514a" class="outline-2"&gt;
&lt;h2 id="org999514a"&gt;&lt;a id="ID-457800BC-6CDE-4005-958F-933854E9D5D8"&gt;&lt;/a&gt;cowsay&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org999514a"&gt;
&lt;p&gt;
奶牛说： &lt;a href="https://github.com/piuccio/cowsay"&gt;地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org56316a0" class="outline-2"&gt;
&lt;h2 id="org56316a0"&gt;&lt;a id="ID-B7ED2FFB-63B2-4D7B-BFB6-94E4388CF28B"&gt;&lt;/a&gt;coreutils&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org56316a0"&gt;
&lt;p&gt;
使用Rust重写的gnuutils。&lt;a href="https://github.com/uutils/coreutils"&gt;地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8dedfd0" class="outline-2"&gt;
&lt;h2 id="org8dedfd0"&gt;&lt;a id="ID-284E458B-5294-4B43-973A-031E2B90DC03"&gt;&lt;/a&gt;direnv&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8dedfd0"&gt;
&lt;p&gt;
环境变量切换，可以指定在进入某一文件夹后的操作，比如输出一条欢迎语句，在退出文件夹后则卸载变量（操作），它的&lt;a href="https://github.com/direnv/direnv/blob/master/stdlib.sh%0A%0A"&gt;stdlib&lt;/a&gt;内置了一些功能来处理环境。 &lt;a href="https://github.com/direnv/direnv"&gt;地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge3b71f3" class="outline-2"&gt;
&lt;h2 id="orge3b71f3"&gt;&lt;a id="ID-B96E9C09-3FA8-4C54-9140-591F5004BFF8"&gt;&lt;/a&gt;exa&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge3b71f3"&gt;
&lt;p&gt;
ls、tree的替代者，支持多种显示方式，支持按指定条件排序显示。&lt;a href="https://github.com/ogham/exa"&gt;地址&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-ming-ling-xing-gong-ju/"&gt;阅读更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>command</category><category>terminal</category><guid>http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-ming-ling-xing-gong-ju/</guid><pubDate>Sat, 29 Sep 2018 23:15:55 GMT</pubDate></item><item><title>那些提高效率的Alfred Workflow</title><link>http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-alfred-workflow/</link><dc:creator>Tomyli</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-orgd34b18f" class="outline-2"&gt;
&lt;h2 id="orgd34b18f"&gt;&lt;a id="ID-06FACFD5-9C4A-4549-8EED-7AEC3D77B480"&gt;&lt;/a&gt;Alfred Browser Toolbox&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd34b18f"&gt;
&lt;p&gt;
Toolbox是一个文件操作浏览的工具，它支持创建、查找文件的功能，还可以查询pdf文件，非常方便。Mac上的Finder使用确定不方便。&lt;a href="https://www.alfredforum.com/topic/5166-copymove-to-and-alfred-browser-workflows/"&gt;这里&lt;/a&gt;有具体的使用方式。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3cd5fac" class="outline-2"&gt;
&lt;h2 id="org3cd5fac"&gt;&lt;a id="ID-49717B74-5702-483B-9E17-33D57893ED79"&gt;&lt;/a&gt;Alfred Keywords Help&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3cd5fac"&gt;
&lt;p&gt;
安装的workflow多了，记忆触发的keyword就比较困难，使用&lt;a href="https://github.com/pochemuto/alfred-help-workflow"&gt;Keywords help&lt;/a&gt;这个插件可以显示出所有已经安装的workflow的触发key，还可以根据workflow进行查询。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9107862" class="outline-2"&gt;
&lt;h2 id="org9107862"&gt;&lt;a id="ID-784CA9EA-34BE-415E-B5F8-5122EE866885"&gt;&lt;/a&gt;Alfred Maestro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9107862"&gt;
&lt;p&gt;
操作Maestro的workflow，可以直接查找macro并执行。&lt;a href="https://github.com/iansinnott/alfred-maestro"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org715914b" class="outline-2"&gt;
&lt;h2 id="org715914b"&gt;&lt;a id="ID-A7DE7E80-197F-45B4-9C21-71CBB239224F"&gt;&lt;/a&gt;Alfred My Mind&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org715914b"&gt;
&lt;p&gt;
快速查询&lt;a href="https://nikitavoloboev.xyz/"&gt;Nikita&lt;/a&gt;的githubpage内容的workflow，我在他的文章里面学到了很多。&lt;a href="https://github.com/nikitavoloboev/alfred-my-mind#readme"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd02140e" class="outline-2"&gt;
&lt;h2 id="orgd02140e"&gt;&lt;a id="ID-35B0B749-2CE5-4E3B-BF74-E19299CEB25C"&gt;&lt;/a&gt;Awesome lists&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd02140e"&gt;
&lt;p&gt;
快速查询Github上awesome列表的workflow，只为发现更多。&lt;a href="https://github.com/nikitavoloboev/alfred-awesome-lists"&gt;插件地址&lt;/a&gt;，这个也是Nikita的作品。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org47eb785" class="outline-2"&gt;
&lt;h2 id="org47eb785"&gt;&lt;a id="ID-8927BBDF-C1D1-46D2-B787-BED1476D08AB"&gt;&lt;/a&gt;Baidu Map&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org47eb785"&gt;
&lt;p&gt;
在alfred上使用百度地图。&lt;a href="https://github.com/wofeiwo/alfred-baidu-map"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-alfred-workflow/"&gt;阅读更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>alfred</category><guid>http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-alfred-workflow/</guid><pubDate>Fri, 21 Sep 2018 02:02:49 GMT</pubDate></item><item><title>那些提高效率的Idea插件</title><link>http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-ideacha-jian/</link><dc:creator>Tomyli</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-orgdcc092f" class="outline-2"&gt;
&lt;h2 id="orgdcc092f"&gt;&lt;a id="ID-AE24E7B5-476E-4121-BF03-B56F91C3D334"&gt;&lt;/a&gt;.ignore&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdcc092f"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgebe48fe" class="outline-3"&gt;
&lt;h3 id="orgebe48fe"&gt;&lt;a id="ID-FA818BA8-4658-4945-BC78-CB5FE9158CD5"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgebe48fe"&gt;
&lt;p&gt;
ignore文件忽略，支持绝大多数的开发语言，支持直接导航到忽略的文件，在创建时可以选择模板，比如Java开发可以选择Java与Idea选项来生成忽略target文件与.idea文件等的忽略规则。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9a446d7" class="outline-3"&gt;
&lt;h3 id="org9a446d7"&gt;&lt;a id="ID-EB4B8E7E-6E5B-4606-BCA2-1DE9C76B7DFE"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9a446d7"&gt;
&lt;p&gt;
&lt;a href="https://github.com/hsz/idea-gitignore"&gt;https://github.com/hsz/idea-gitignore&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge9180b1" class="outline-2"&gt;
&lt;h2 id="orge9180b1"&gt;&lt;a id="ID-CE57BFC9-7C86-4F59-AB90-2269F6420F6F"&gt;&lt;/a&gt;IdeaVim&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge9180b1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org16076e6" class="outline-3"&gt;
&lt;h3 id="org16076e6"&gt;&lt;a id="ID-8E43E640-B183-4816-8F73-6C57957409CE"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org16076e6"&gt;
&lt;p&gt;
在Idea中使用vi键位来进行编码操作,可以很高的提高效率,插件支持自定义键位来对Idea的action来进行定制,程序员可以根据自己的编程习惯来定制出一个键盘流来.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org33dafb8" class="outline-3"&gt;
&lt;h3 id="org33dafb8"&gt;&lt;a id="ID-0A6CB64D-16EF-4251-BF41-592D3E1FE2DB"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org33dafb8"&gt;
&lt;p&gt;
&lt;a href="https://github.com/JetBrains/ideavim"&gt;https://github.com/JetBrains/ideavim&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb4beec6" class="outline-2"&gt;
&lt;h2 id="orgb4beec6"&gt;&lt;a id="ID-8B7FB695-0353-4B60-BAD5-A2B925431EA9"&gt;&lt;/a&gt;emacsIDEAs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb4beec6"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6dcfc57" class="outline-3"&gt;
&lt;h3 id="org6dcfc57"&gt;&lt;a id="ID-997170C1-0DA9-4F3C-A9D1-B12FB18D206D"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6dcfc57"&gt;
&lt;p&gt;
支持一些Emacs操作的Idea插件,主要是一些复制,移动,替换,跳转的快捷操作,目前使用最多的是快速查找替换.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8eefffa" class="outline-3"&gt;
&lt;h3 id="org8eefffa"&gt;&lt;a id="ID-AA572D98-2A6F-47B3-88D2-B18E07DB7462"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8eefffa"&gt;
&lt;p&gt;
&lt;a href="https://github.com/whunmr/emacsIDEAs"&gt;https://github.com/whunmr/emacsIDEAs&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-ideacha-jian/"&gt;阅读更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>idea</category><category>plugin</category><guid>http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-ideacha-jian/</guid><pubDate>Wed, 05 Sep 2018 00:12:23 GMT</pubDate></item><item><title>设计模式学习之代理模式</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-dai-li-mo-shi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-orgdc44c49" class="outline-2"&gt;
&lt;h2 id="orgdc44c49"&gt;&lt;a id="ID-5106DED6-E60F-47AF-9FED-C24E5A9146D2"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdc44c49"&gt;
&lt;p&gt;
代理模式是设计模式中使用频率非常的高的模式，像日常生活中的房产中介、外卖平台都属于代理。代理模式就是在访问真正的业务之时不会直接与真正的业务进行调用，而是与一个与真正业务对象有着相同功能声明的代理来进行处理，但是最终的处理还是由真正的业务类来进行（决定），比如房产中介，他们会帮助找房者根据条件来对可选房屋进行筛选，但是最终订与不订的权利还是由找房者来决定。常见的代理有保护代理、虚拟代理、远程代理。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4c0aa76" class="outline-2"&gt;
&lt;h2 id="org4c0aa76"&gt;&lt;a id="ID-8FA1D55F-C6F7-4666-9E13-0D33878BB72E"&gt;&lt;/a&gt;代理模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4c0aa76"&gt;
&lt;p&gt;
我们常用的后台系统一般会根据用户权限的不同对用户展示不同的业务菜单，拥有高权限的人会展示相对多的菜单进行操作，在这个过程中还要记录用户的操作日志，用户点了什么，执行了什么操作都需要进行记录，达到有据可查。在这个业务场景下，就可以使用代理模式进行实现。代理对象会持有一个真正业务对象的实例，在代理对象中还引用日志服务与权限服务，所有的请求都经过这个代理类来进行，这样就可以根据操作的用户的状态来进行相应的处理了。具体的代码实现如下：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;定义一个查询接口，在这里定义一个查询用户收入的方法，如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.proxy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/28.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Search&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;queryIncome&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-dai-li-mo-shi/"&gt;阅读更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-dai-li-mo-shi/</guid><pubDate>Mon, 16 Jul 2018 13:08:28 GMT</pubDate></item><item><title>设计模式学习之委托模式</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-wei-tuo-mo-shi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-orgf9c1c66" class="outline-2"&gt;
&lt;h2 id="orgf9c1c66"&gt;&lt;a id="ID-AC010333-BEEE-4816-8429-F348912688BA"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf9c1c66"&gt;
&lt;p&gt;
委托模式不属于23种设计模式中，但是它在Spring框架中使用的很频繁，Spring的作用在Java的开发是非常大，所以需要学习一下委托模式。委托模式是指两个对象都有相同的方法与功能，比如A、B两个对象都有相同的方法，但是有调用A的method方法，A不会自己来处理而是直接调用了B的同名方法，由两个对象参与同一个请求，接受请求的对象将委托给另一个对象来处理。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3986a6a" class="outline-2"&gt;
&lt;h2 id="org3986a6a"&gt;&lt;a id="ID-59ADDF7B-BDA4-4D49-9A44-C72DC76E95FE"&gt;&lt;/a&gt;委托模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3986a6a"&gt;
&lt;p&gt;
在一般的公司中，都会分为老板、项目经理、开发人员结构，老板负责制定决策，分配给项目经理后，他不会自己来完成，而是把需要的功能进行分解，交给擅长的开发人员进行实现。虽然项目经理也可以完成，但是是他把这些事情委托给了多个开发人员来做，加快了完成任务的速度。就以这个需求来说，使用委托模式来进行实现:
&lt;/p&gt;

&lt;p&gt;
定义抽象的人类接口：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.delegate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/27.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showSkill&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面代码中定义了抽象的人类接口，显示这个人的名字，拥有的技能，工作的状态情况，接下来实现需求中的每个人。
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-wei-tuo-mo-shi/"&gt;阅读更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-wei-tuo-mo-shi/</guid><pubDate>Sat, 07 Jul 2018 10:53:57 GMT</pubDate></item><item><title>设计模式学习之观察者</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-guan-cha-zhe/</link><dc:creator>Tomyli</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-org93b7fa3" class="outline-2"&gt;
&lt;h2 id="org93b7fa3"&gt;&lt;a id="ID-8B1369E7-771F-4568-84A2-68681795C0D4"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org93b7fa3"&gt;
&lt;p&gt;
观察者模式在日常开发中使用频率也是非常高的，它建立了对象与对象之间的关系，一个对象的行为改变会通知到另一个对象，被通知的对象根据通知做出相应的处理动作。在观察者中分为目标对象（被观察者）、观察者。观察者模式是一种对象行为模式。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org805bee6" class="outline-2"&gt;
&lt;h2 id="org805bee6"&gt;&lt;a id="ID-DF91D356-308F-4653-B691-EEDBD8E73380"&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org805bee6"&gt;
&lt;p&gt;
现在很多人都购买股票，在市面上有很多的股票软件供广大股民使用。股票软件一般会在用户关注的股票有变动时发送消息来通知股民。在这里，某一支股票就是目标对象，广大股民与股票软件就是观察者，他们根据股票的行情变化来做出相应买入或者卖出操作。这一需求可以使用观察者模式进行实现。代码如下：
&lt;/p&gt;

&lt;p&gt;
先来定义一个抽象的购买股票的股民们，他们有喜有悲的心情:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.observer.stock&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/23.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Buyer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;happy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sad&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
再来定义具体的股民行为实现类：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.observer.stock&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/23.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConcrectBuyer&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Buyer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;happy&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;":happy"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sad&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;":sad"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-guan-cha-zhe/"&gt;阅读更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-guan-cha-zhe/</guid><pubDate>Wed, 04 Jul 2018 12:31:41 GMT</pubDate></item><item><title>设计模式学习之装饰器</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-zhuang-shi-qi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-orgd7e278e" class="outline-2"&gt;
&lt;h2 id="orgd7e278e"&gt;&lt;a id="ID-9F831376-652F-49A6-81C3-04B7B7D028F9"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd7e278e"&gt;
&lt;p&gt;
装饰器设计模式是使用比较频繁的设计模式，它在不改变原物体的情况对原物体实现了功能的增加，原物体还是一个可单独使用的个体。在JAVA的类库中应该会马上想到IO类，各种的InputStrem，OutputStrem。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd51f8d3" class="outline-2"&gt;
&lt;h2 id="orgd51f8d3"&gt;&lt;a id="ID-108171D7-868E-409F-986B-C1D1A9A60C82"&gt;&lt;/a&gt;装饰器模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd51f8d3"&gt;
&lt;p&gt;
在用户登录的中过程，我们需要对用户输入的密码进行加密操作，在设计时会提供好多种加密的算法，例如简单的BASE64加密，复杂的如MD5、DSA加密。直接把用户的密码存入数据库是真的在耍流氓。在使用这些算法时，我们想灵活的使用，比如使用完简单加密还可以再进行一下MD5的加密。针对这样的需求，可以使用装饰器模式进行实现。大体思路如下：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;加密接口，定义加密方法。&lt;/li&gt;
&lt;li&gt;在装饰器中，最原始的被装饰者是目标实现，它们一般会实现加密定义的具体方法。&lt;/li&gt;
&lt;li&gt;装饰者会针对目标对象进行装饰，所以它要同样实现加密接口的方法，一般情况下这个装饰器会定义为抽象的形式，在这个装饰器父类中维护着对目标对象的引用。&lt;/li&gt;
&lt;li&gt;具体装饰器继承抽象装饰器来实现对目标对象的真正装饰操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
以上的情况在代码上体现为如下形式：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;加密接口&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.decorator.encrypt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/25.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Encryptor&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-zhuang-shi-qi/"&gt;阅读更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-zhuang-shi-qi/</guid><pubDate>Mon, 02 Jul 2018 12:09:14 GMT</pubDate></item><item><title>设计模式学习之适配器</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-gua-pei-qi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-org4337427" class="outline-2"&gt;
&lt;h2 id="org4337427"&gt;&lt;a id="ID-EB4962BA-C631-4716-BC9D-20C978873C77"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4337427"&gt;
&lt;p&gt;
在&lt;a href="http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-mo-ban-mo-shi"&gt;前面&lt;/a&gt;的文章中介绍了一些关于支付相关的功能，现在转向登录，在早些时期的系统登录就是用户使用用户名与密码进行注册，注册成功后就可以进行登录了。随着时代的发展，出现很多三方的平台，它们对外提供了获取平台用户信息的功能，例如微信、qq、微博等三方登录，在接入这些三方登录时都是遵循相应的规则，老的登录的方式需要保留，对接新的登录方式还想要使用老的登录服务，这样可以使用适配器模式来实现。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga7ceefc" class="outline-2"&gt;
&lt;h2 id="orga7ceefc"&gt;&lt;a id="ID-1C175AD8-25AF-469B-82AD-6C10817DF235"&gt;&lt;/a&gt;适配器模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga7ceefc"&gt;
&lt;p&gt;
比如我们平常使用的转接头一样，就是一种适配器的模式。它使两个不相关的物体很好的关联在一起。对于要接入的新的登录方式，首先定义新的三方登录的接口，定义要使用的三方登录方式，如下代码示例：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.adapter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/22.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ThirdLogin&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;wechatLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;qqLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sinaLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
如上定义了微信、qq、微博三种登录方式，它们都是使用accessToken来进行认证，经用户同意后获取相应的用户的信息调用方使用。下面来进行具体的实现：
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-gua-pei-qi/"&gt;阅读更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-gua-pei-qi/</guid><pubDate>Tue, 26 Jun 2018 13:30:17 GMT</pubDate></item><item><title>设计模式学习之模板模式</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-mo-ban-mo-shi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-org0a17cd2" class="outline-2"&gt;
&lt;h2 id="org0a17cd2"&gt;&lt;a id="ID-1D499B1D-BE98-4A3B-B9FA-BA4DEB4B4DB4"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0a17cd2"&gt;
&lt;p&gt;
在一般实现处理用户支付订单时，通常都会在一个单独的回调项目中来处理用户的支付方式回调。一般情况下，回调的处理过程都是相似的，大体的步骤就是获取参数-&amp;gt;验证参数-&amp;gt;验证签名-&amp;gt;验证支付状态（可选）-&amp;gt;订单状态为成功增加用户的充值金额。具体的过程由于不同的支付方式不同而处理的不同。这种需求可以使用模板的模板模式来实现。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org748f8b4" class="outline-2"&gt;
&lt;h2 id="org748f8b4"&gt;&lt;a id="ID-D853C6D0-3137-4D2C-AE23-FC5BD4185FEE"&gt;&lt;/a&gt;模板设计模式实现&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org748f8b4"&gt;
&lt;p&gt;
模板模式就是由一个类来声明整个处理流程的步骤，具体的实现由各个实现类来进行实现。处理的流程不变，变是就是里面具体的实现。针对上面的支付回调，可以声明一个抽象类来声明具体的流程方法，代码如下：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.callback&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Map&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/21.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PayCallback&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getParam&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;checkParam&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;validSign&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;       * 定义了一个钩子方法来让子类控制流程实现&lt;/span&gt;
&lt;span class="cm"&gt;       * @return true：强制返回，false：不强制返回&lt;/span&gt;
&lt;span class="cm"&gt;       */&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;forceReturn&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;doService&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getParam&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;checkParam&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"param fail"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt;
	  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;validSign&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"sign fail"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt;

	  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forceReturn&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
		  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"order fail"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	      &lt;span class="o"&gt;}&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt;

	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-mo-ban-mo-shi/"&gt;阅读更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-mo-ban-mo-shi/</guid><pubDate>Mon, 25 Jun 2018 13:06:17 GMT</pubDate></item><item><title>设计模式学习之策略模式</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-ce-lue-mo-shi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-orgb3ce1c7" class="outline-2"&gt;
&lt;h2 id="orgb3ce1c7"&gt;&lt;a id="ID-1F35F4B4-1981-4880-808D-FD4B457B30DB"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb3ce1c7"&gt;
&lt;p&gt;
策略模式是设计模式中使用频率很高的模式，主要的就是实现对行为的包装，达到结果的方式有多种，使用者可以选择任何一个方式来得到想要结果，在增加新的方式时更加的方便与灵活。它是为了适应算法的灵活性而产生的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgde226aa" class="outline-2"&gt;
&lt;h2 id="orgde226aa"&gt;&lt;a id="ID-F6C5FFEB-1164-429F-9C99-9A3E147CB3F6"&gt;&lt;/a&gt;策略模式实现&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgde226aa"&gt;
&lt;p&gt;
以常用的购物为例，一般情况下购物分为浏览商品，下单，支付。在支付时消费者可以选择多种不同的支付方式，如支付宝、微信、京东支付、银联支付等。在支付中流程就可以使用到策略模式，网站为用户提供了这些支付方式可供选择，用户只需要选择自己喜欢的支付方式来进行充值就可以得到商品了。在一般情况下都会定义一个抽象类来定义支付的一些行为，如金额，商品简介等信息。实现的抽象类如以下定义：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.pay&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/20.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Payment&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;pay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
这样就定义了支付方式的行为，剩下的就由不同的支付方式来进行实现，比如支付宝支付、微信支付，示例代码如下：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.pay&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/20.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AliPay&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;pay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"AliPay"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WechatPay&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;pay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"WechatPay"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-ce-lue-mo-shi/"&gt;阅读更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-ce-lue-mo-shi/</guid><pubDate>Tue, 19 Jun 2018 23:04:56 GMT</pubDate></item></channel></rss>