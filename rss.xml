<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>I'm company</title><link>http://blog.imcompany.cn/</link><description>把知识用起来最好的方法就是：减少关注方向，经常记录，定期思考，反复实践，不把信息当作知识，不把收藏当作学习，不把阅读当作思考，不把储存当作掌握。 不提炼总结、不应用学习、不深入思考、不实践反馈，就不会变成自己的能力。———warfalcon</description><atom:link href="http://blog.imcompany.cn/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2018 &lt;a href="mailto:peng051410@gmail.comjoe@demo.site"&gt;Tomyli&lt;/a&gt; </copyright><lastBuildDate>Sat, 29 Sep 2018 03:57:00 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>那些提高效率的Alfred Workflow</title><link>http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-alfred-workflow/</link><dc:creator>Tomyli</dc:creator><description>&lt;div id="outline-container-orgd519d29" class="outline-2"&gt;
&lt;h2 id="orgd519d29"&gt;&lt;a id="ID-06FACFD5-9C4A-4549-8EED-7AEC3D77B480"&gt;&lt;/a&gt;Alfred Browser Toolbox&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd519d29"&gt;
&lt;p&gt;
Toolbox是一个文件操作浏览的工具，它支持创建、查找文件的功能，还可以查询pdf文件，非常方便。Mac上的Finder使用确定不方便。&lt;a href="https://www.alfredforum.com/topic/5166-copymove-to-and-alfred-browser-workflows/"&gt;这里&lt;/a&gt;有具体的使用方式。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org45be273" class="outline-2"&gt;
&lt;h2 id="org45be273"&gt;&lt;a id="ID-49717B74-5702-483B-9E17-33D57893ED79"&gt;&lt;/a&gt;Alfred Keywords Help&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org45be273"&gt;
&lt;p&gt;
安装的workflow多了，记忆触发的keyword就比较困难，使用&lt;a href="https://github.com/pochemuto/alfred-help-workflow"&gt;Keywords help&lt;/a&gt;这个插件可以显示出所有已经安装的workflow的触发key，还可以根据workflow进行查询。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdc9a50d" class="outline-2"&gt;
&lt;h2 id="orgdc9a50d"&gt;&lt;a id="ID-784CA9EA-34BE-415E-B5F8-5122EE866885"&gt;&lt;/a&gt;Alfred Maestro&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdc9a50d"&gt;
&lt;p&gt;
操作Maestro的workflow，可以直接查找macro并执行。&lt;a href="https://github.com/iansinnott/alfred-maestro"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgddd5efd" class="outline-2"&gt;
&lt;h2 id="orgddd5efd"&gt;&lt;a id="ID-A7DE7E80-197F-45B4-9C21-71CBB239224F"&gt;&lt;/a&gt;Alfred My Mind&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgddd5efd"&gt;
&lt;p&gt;
快速查询&lt;a href="https://nikitavoloboev.xyz/"&gt;Nikita&lt;/a&gt;的githubpage内容的workflow，我在他的文章里面学到了很多。&lt;a href="https://github.com/nikitavoloboev/alfred-my-mind#readme"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga9a02da" class="outline-2"&gt;
&lt;h2 id="orga9a02da"&gt;&lt;a id="ID-35B0B749-2CE5-4E3B-BF74-E19299CEB25C"&gt;&lt;/a&gt;Awesome lists&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga9a02da"&gt;
&lt;p&gt;
快速查询Github上awesome列表的workflow，只为发现更多。&lt;a href="https://github.com/nikitavoloboev/alfred-awesome-lists"&gt;插件地址&lt;/a&gt;，这个也是Nikita的作品。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org81b30b9" class="outline-2"&gt;
&lt;h2 id="org81b30b9"&gt;&lt;a id="ID-8927BBDF-C1D1-46D2-B787-BED1476D08AB"&gt;&lt;/a&gt;Baidu Map&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org81b30b9"&gt;
&lt;p&gt;
在alfred上使用百度地图。&lt;a href="https://github.com/wofeiwo/alfred-baidu-map"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd510fa7" class="outline-2"&gt;
&lt;h2 id="orgd510fa7"&gt;&lt;a id="ID-56143948-8358-4530-84DA-666BBA6B3F89"&gt;&lt;/a&gt;Birthday&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd510fa7"&gt;
&lt;p&gt;
在alfred中显示你来到这个世界多长时间，让你珍惜每一分，每一秒。&lt;a href="https://github.com/nikitavoloboev/small-workflows/tree/master/birthday#readme"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga50da51" class="outline-2"&gt;
&lt;h2 id="orga50da51"&gt;&lt;a id="ID-0249D0F7-6AEC-4B4D-98DA-F5BBFA612BE6"&gt;&lt;/a&gt;Calendar&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga50da51"&gt;
&lt;p&gt;
在alfred中显示出当月的日历信息。&lt;a href="https://github.com/owenwater/alfred-cal"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8703672" class="outline-2"&gt;
&lt;h2 id="org8703672"&gt;&lt;a id="ID-BE3C62A7-8564-4B7B-97E1-464DC5ADD771"&gt;&lt;/a&gt;Chromes Bookmarks&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8703672"&gt;
&lt;p&gt;
在aflred中搜索Chrome浏览器的书签，非常的好用。&lt;a href="https://github.com/blainesch/alfred-chrome-bookmarks"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0e98839" class="outline-2"&gt;
&lt;h2 id="org0e98839"&gt;&lt;a id="ID-7A5576D5-6ECD-496B-B29D-3AB3632F6D3A"&gt;&lt;/a&gt;Common Search&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0e98839"&gt;
&lt;p&gt;
国内常用网站的搜索，现在支持知乎、淘宝、掘金、github。&lt;a href="https://github.com/MuYunyun/commonSearch"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8e654df" class="outline-2"&gt;
&lt;h2 id="org8e654df"&gt;&lt;a id="ID-582CC0AD-7614-4FAA-8CD3-0DE84B380A50"&gt;&lt;/a&gt;Dash&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8e654df"&gt;
&lt;p&gt;
在alfred中进行Dash的搜索，开发者必备。&lt;a href="https://github.com/Kapeli/Dash-Alfred-Workflow"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org483e99f" class="outline-2"&gt;
&lt;h2 id="org483e99f"&gt;&lt;a id="ID-A11F5899-DB1E-4A8A-A65D-201AAA4A85A5"&gt;&lt;/a&gt;Directory watches&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org483e99f"&gt;
&lt;p&gt;
本地目录文件查看，指定目录的搜索，回收站文件显示。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2fbddc6" class="outline-2"&gt;
&lt;h2 id="org2fbddc6"&gt;&lt;a id="ID-1D4EB2D4-0D51-442C-B754-0DD326A2A8DE"&gt;&lt;/a&gt;Emacs Workflow&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2fbddc6"&gt;
&lt;p&gt;
在alfred中进行emacs的操作，比如打开文件等。&lt;a href="https://www.alfredforum.com/topic/8444-emacs-workflow/"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf5a7588" class="outline-2"&gt;
&lt;h2 id="orgf5a7588"&gt;&lt;a id="ID-CEDC7309-2013-47E4-A24F-44F174E45288"&gt;&lt;/a&gt;Eudic&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf5a7588"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4b86b7a" class="outline-3"&gt;
&lt;h3 id="org4b86b7a"&gt;&lt;a id="ID-BB1E1F7B-C8D8-4F95-93E4-97F03AB48241"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4b86b7a"&gt;
&lt;p&gt;
使用欧路词典进行快速翻译。&lt;a href="https://github.com/cdpath/eudic_tools"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaec1f19" class="outline-2"&gt;
&lt;h2 id="orgaec1f19"&gt;&lt;a id="ID-024A5F17-021A-4080-9A19-922F35F7CA2C"&gt;&lt;/a&gt;Git Repos&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgaec1f19"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6f91d11" class="outline-3"&gt;
&lt;h3 id="org6f91d11"&gt;&lt;a id="ID-70B62A05-407D-438E-BA65-EDCA996CFFE8"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6f91d11"&gt;
&lt;p&gt;
搜索本地的git文件夹，搜索到后可以使用指定软件进行打开，开发时很有用。&lt;a href="https://github.com/deanishe/alfred-repos"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org51f9a4d" class="outline-3"&gt;
&lt;h3 id="org51f9a4d"&gt;&lt;a id="ID-23BB0C6B-8928-419E-8D7F-1ED5F8EFFFA5"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org51f9a4d"&gt;
&lt;p&gt;
搜索github上的项目，可以搜索项目，人物等。&lt;a href="https://github.com/gharlan/alfred-github-workflow"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org53d2794" class="outline-2"&gt;
&lt;h2 id="org53d2794"&gt;&lt;a id="ID-81A1FCE3-1AE3-4DD8-847C-2B48289BE260"&gt;&lt;/a&gt;Google Chrome History&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org53d2794"&gt;
&lt;p&gt;
在alfred中快速查看Chrome的浏览历史。&lt;a href="https://github.com/tupton/alfred-chrome-history"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2b7b82b" class="outline-2"&gt;
&lt;h2 id="org2b7b82b"&gt;&lt;a id="ID-7BE62DC1-ADB6-4F06-B5F6-4C3C81882B08"&gt;&lt;/a&gt;Hammerspoon Workflow&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2b7b82b"&gt;
&lt;p&gt;
在alfred中调用hammerspon脚本的workflow。&lt;a href="https://www.alfredforum.com/topic/5334-hammerspoon-workflow/"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb9ecd81" class="outline-2"&gt;
&lt;h2 id="orgb9ecd81"&gt;&lt;a id="ID-8DC01423-3721-4D91-8F6D-8FC3C67115CC"&gt;&lt;/a&gt;Homebrew &amp;amp; Cask for Alfred&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb9ecd81"&gt;
&lt;p&gt;
在alfred中进行mac软件的更新、查看、安装等。&lt;a href="https://github.com/fniephaus/alfred-homebrew/"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2603bf9" class="outline-2"&gt;
&lt;h2 id="org2603bf9"&gt;&lt;a id="ID-10218152-446D-42E4-8D4E-CF3E7BA598F1"&gt;&lt;/a&gt;iTerm Sessions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2603bf9"&gt;
&lt;p&gt;
在alfre中快速切换iterm中存在的session窗口。&lt;a href="https://github.com/madvas/alfred-iterm-sessions"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdbace48" class="outline-2"&gt;
&lt;h2 id="orgdbace48"&gt;&lt;a id="ID-3426706F-953B-4464-869B-BFEB68EFBBA9"&gt;&lt;/a&gt;Kill Process&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdbace48"&gt;
&lt;p&gt;
在alfred中kill进程，有时候程序假死，使用这个很方便，不用再在苹果的菜单栏中点击好几下来操作了。&lt;a href="https://github.com/nathangreenstein/alfred-process-killer"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga198e41" class="outline-2"&gt;
&lt;h2 id="orga198e41"&gt;&lt;a id="ID-FE3BF159-26CC-4D02-95DC-E8AC3393B8C7"&gt;&lt;/a&gt;Last changed files&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga198e41"&gt;
&lt;p&gt;
显示出当前系统最新修改的文件，对于系统有什么修改一目了然。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org084eeab" class="outline-2"&gt;
&lt;h2 id="org084eeab"&gt;&lt;a id="ID-F7872C53-3F87-4A9E-A90D-E2701D343046"&gt;&lt;/a&gt;Launcher&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org084eeab"&gt;
&lt;p&gt;
应用程序快速启动workflow，结束Karabiner使用。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org475f400" class="outline-2"&gt;
&lt;h2 id="org475f400"&gt;&lt;a id="ID-433CC6A2-1555-4C17-98AD-27353548F7C0"&gt;&lt;/a&gt;Learn Anything&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org475f400"&gt;
&lt;p&gt;
Nivita的Learn Anything，只为学习更多。&lt;a href="https://github.com/nikitavoloboev/alfred-learn-anything"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga76b16b" class="outline-2"&gt;
&lt;h2 id="orga76b16b"&gt;&lt;a id="ID-60006CDE-E02A-4828-92E8-2ECDED8268CB"&gt;&lt;/a&gt;Linux Command&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga76b16b"&gt;
&lt;p&gt;
Linux命令手册，快速查询linux命令。&lt;a href="https://github.com/jaywcjlove/linux-command"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgef371ba" class="outline-2"&gt;
&lt;h2 id="orgef371ba"&gt;&lt;a id="ID-929CF82B-8B2C-4C05-8E14-6EC004B29319"&gt;&lt;/a&gt;Mail.app Search&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgef371ba"&gt;
&lt;p&gt;
快速搜索Mail.app中的邮件信息。可以根据邮件名，发送人，主题等进行搜索。&lt;a href="http://www.packal.org/workflow/mailapp-search"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeb13b2d" class="outline-2"&gt;
&lt;h2 id="orgeb13b2d"&gt;&lt;a id="ID-C0D62E25-FF33-49C1-82B0-1AD25978BA52"&gt;&lt;/a&gt;MyIP&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeb13b2d"&gt;
&lt;p&gt;
快速的查询本机的ip，包括本地IP与外网IP。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc3ff76b" class="outline-2"&gt;
&lt;h2 id="orgc3ff76b"&gt;&lt;a id="ID-DA90B235-A56A-4360-94E9-00C1647DC319"&gt;&lt;/a&gt;NSC&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc3ff76b"&gt;
&lt;p&gt;
各种进制的转换，支持二进制、十进制、十六进制之间的快速转换。&lt;a href="https://github.com/obstschale/NSC"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9afe2a3" class="outline-2"&gt;
&lt;h2 id="org9afe2a3"&gt;&lt;a id="ID-9209A35D-3D61-45A9-B8BD-25538F35B8E2"&gt;&lt;/a&gt;org-mode-capture&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9afe2a3"&gt;
&lt;p&gt;
快速插入Org capture，可以快速的记录TODO事件。&lt;a href="https://github.com/alexandergogl/alfred-org-mode-workflow"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4f538ef" class="outline-2"&gt;
&lt;h2 id="org4f538ef"&gt;&lt;a id="ID-9E445427-E5CD-449B-BA91-61DFBEF26466"&gt;&lt;/a&gt;Packal Search&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4f538ef"&gt;
&lt;p&gt;
Alfred workflow的快速搜索、更新。&lt;a href="https://github.com/deanishe/alfred-packal-search"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgccbd528" class="outline-2"&gt;
&lt;h2 id="orgccbd528"&gt;&lt;a id="ID-36ECE447-1661-4B7A-93A3-2DA900A803D8"&gt;&lt;/a&gt;Recent Documents / Apps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgccbd528"&gt;
&lt;p&gt;
显示当前的文档信息，当前的app信息，当前app关联的文档信息。&lt;a href="https://github.com/mpco/Alfred3-workflow-recent-documents"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org991118d" class="outline-2"&gt;
&lt;h2 id="org991118d"&gt;&lt;a id="ID-A41488FA-B6F7-4ED7-B749-C221D0DEFA77"&gt;&lt;/a&gt;Search Safari and Chrome Tabs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org991118d"&gt;
&lt;p&gt;
搜索Chrome和Safari当前打开的tab页面，支持跳转到选择页面。&lt;a href="http://www.packal.org/workflow/search-safari-and-chrome-tabs"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb17e68f" class="outline-2"&gt;
&lt;h2 id="orgb17e68f"&gt;&lt;a id="ID-496F6122-8863-4020-8C14-1E0DACC18462"&gt;&lt;/a&gt;Searchio!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb17e68f"&gt;
&lt;p&gt;
支持google、youtuebe、wiki的fuzzy搜索，支持配置多种语言。&lt;a href="https://github.com/deanishe/alfred-searchio"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfdd9739" class="outline-2"&gt;
&lt;h2 id="orgfdd9739"&gt;&lt;a id="ID-9A0BF988-2311-47D8-8CC6-48DCA22BD735"&gt;&lt;/a&gt;SSH SecureCRT&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfdd9739"&gt;
&lt;p&gt;
在alfre快速连接SecureCRT的session。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org312d2d7" class="outline-2"&gt;
&lt;h2 id="org312d2d7"&gt;&lt;a id="ID-B50A0847-AACE-48BB-BB84-1B728A8FD3D8"&gt;&lt;/a&gt;StackOverflow&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org312d2d7"&gt;
&lt;p&gt;
搜索stackoverflow上的指定问题。&lt;a href="https://github.com/deanishe/alfred-stackoverflow"&gt;插件地址(deanishe)&lt;/a&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5f2ea7b" class="outline-2"&gt;
&lt;h2 id="org5f2ea7b"&gt;&lt;a id="ID-8F1A51E6-77C2-488A-875E-D4933DF92B11"&gt;&lt;/a&gt;Swift Window Switcher&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5f2ea7b"&gt;
&lt;p&gt;
使用alfred来快速切换应用的窗口，还可以对safari的当前标签进行搜索。&lt;a href="https://github.com/mandrigin/AlfredSwitchWindows"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge7af0eb" class="outline-2"&gt;
&lt;h2 id="orge7af0eb"&gt;&lt;a id="ID-5F9D7E27-626F-4AA4-9BD5-F6D6699F7E3D"&gt;&lt;/a&gt;SwitchHosts!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge7af0eb"&gt;
&lt;p&gt;
在alfred中快速本地host的配置，配合&lt;a href="https://github.com/oldj/SwitchHosts"&gt;SwitchHosts&lt;/a&gt;来使用。&lt;a href="http://www.packal.org/workflow/switchhosts"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org61c39fc" class="outline-2"&gt;
&lt;h2 id="org61c39fc"&gt;&lt;a id="ID-1DDA64C3-16EA-4CAC-93F7-9F94F3CD7DE8"&gt;&lt;/a&gt;Tldr&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org61c39fc"&gt;
&lt;p&gt;
Tldr的alfred版本，快速查询命令。&lt;a href="https://github.com/cs1707/tldr-alfred"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge49298c" class="outline-2"&gt;
&lt;h2 id="orge49298c"&gt;&lt;a id="ID-24331980-1F67-4F56-B2BC-611B5AD361AD"&gt;&lt;/a&gt;Uninstall with CleanMyMac X&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge49298c"&gt;
&lt;p&gt;
使用CleanMyMac来快速卸载软件。&lt;a href="http://www.packal.org/workflow/uninstall-cleanmymac-x"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7a8cb4b" class="outline-2"&gt;
&lt;h2 id="org7a8cb4b"&gt;&lt;a id="ID-4717273F-3FD0-41E2-8129-B54E49F59613"&gt;&lt;/a&gt;VagrantUP&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7a8cb4b"&gt;
&lt;p&gt;
控制vagrant的workflow，可以显示vagrant的环境，根据name，path进行过滤等。&lt;a href="https://github.com/m1keil/alfred-vagrant-workflow"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge4e9848" class="outline-2"&gt;
&lt;h2 id="orge4e9848"&gt;&lt;a id="ID-E0A0B020-F936-44C5-B060-44FEE22DE9F5"&gt;&lt;/a&gt;VMWare Control&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge4e9848"&gt;
&lt;p&gt;
在alfred中控制vmware虚拟机。支持启动、停止、挂起、切换等操作。&lt;a href="http://www.packal.org/workflow/vmware-control"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org85ac503" class="outline-2"&gt;
&lt;h2 id="org85ac503"&gt;&lt;a id="ID-23FA43C2-A45D-491D-9EC6-CF7E3A719F4F"&gt;&lt;/a&gt;Web Searches&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org85ac503"&gt;
&lt;p&gt;
通用的web搜索，支持reddit，google translate等网站搜索。&lt;a href="https://github.com/nikitavoloboev/alfred-web-searches"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6f352b6" class="outline-2"&gt;
&lt;h2 id="org6f352b6"&gt;&lt;a id="ID-22EA63EA-EBCA-49D8-9880-41B39AC40AB6"&gt;&lt;/a&gt;WeChat Plugin&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6f352b6"&gt;
&lt;p&gt;
在alfred中进行微信聊天，可以显示聊天记录，超级方便。&lt;a href="https://github.com/TKkk-iOSer/WeChatPlugin-MacOS"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge282b29" class="outline-2"&gt;
&lt;h2 id="orge282b29"&gt;&lt;a id="ID-72D51B8A-7C70-4E0D-9F7E-359464014DA2"&gt;&lt;/a&gt;Wi-Fi&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge282b29"&gt;
&lt;p&gt;
控制Mac的ip开关，新更新的版本增加了重启wifi的功能。&lt;a href="https://github.com/ravelll/wifi-workflow"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga24f5d8" class="outline-2"&gt;
&lt;h2 id="orga24f5d8"&gt;&lt;a id="ID-95EFB24B-5451-46BD-B668-7F76501EA079"&gt;&lt;/a&gt;Youdao Translate&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga24f5d8"&gt;
&lt;p&gt;
有道词典快速查询翻译，支持中英互译，发音，记录查询历史等功能。&lt;a href="https://github.com/Rouwanzi/AlfredWorkflow_YoudaoTranslate"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org55c9afd" class="outline-2"&gt;
&lt;h2 id="org55c9afd"&gt;&lt;a id="ID-B66C2574-28E1-4B82-90D2-0BAAC9879BCD"&gt;&lt;/a&gt;Zapier for Alfred&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org55c9afd"&gt;
&lt;p&gt;
在alfred中触发zapier流，目前还在尝试中。&lt;a href="https://github.com/zapier/Zapier-for-Alfred/"&gt;插件地址&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>alfred</category><guid>http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-alfred-workflow/</guid><pubDate>Fri, 21 Sep 2018 02:02:49 GMT</pubDate></item><item><title>那些提高效率的Idea插件</title><link>http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-ideacha-jian/</link><dc:creator>Tomyli</dc:creator><description>&lt;div id="outline-container-org88479e5" class="outline-2"&gt;
&lt;h2 id="org88479e5"&gt;&lt;a id="ID-AE24E7B5-476E-4121-BF03-B56F91C3D334"&gt;&lt;/a&gt;.ignore&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org88479e5"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc323b28" class="outline-3"&gt;
&lt;h3 id="orgc323b28"&gt;&lt;a id="ID-FA818BA8-4658-4945-BC78-CB5FE9158CD5"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc323b28"&gt;
&lt;p&gt;
ignore文件忽略，支持绝大多数的开发语言，支持直接导航到忽略的文件，在创建时可以选择模板，比如Java开发可以选择Java与Idea选项来生成忽略target文件与.idea文件等的忽略规则。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org465aa20" class="outline-3"&gt;
&lt;h3 id="org465aa20"&gt;&lt;a id="ID-EB4B8E7E-6E5B-4606-BCA2-1DE9C76B7DFE"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org465aa20"&gt;
&lt;p&gt;
&lt;a href="https://github.com/hsz/idea-gitignore"&gt;https://github.com/hsz/idea-gitignore&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org05cbd63" class="outline-2"&gt;
&lt;h2 id="org05cbd63"&gt;&lt;a id="ID-CE57BFC9-7C86-4F59-AB90-2269F6420F6F"&gt;&lt;/a&gt;IdeaVim&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org05cbd63"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org16956f9" class="outline-3"&gt;
&lt;h3 id="org16956f9"&gt;&lt;a id="ID-8E43E640-B183-4816-8F73-6C57957409CE"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org16956f9"&gt;
&lt;p&gt;
在Idea中使用vi键位来进行编码操作,可以很高的提高效率,插件支持自定义键位来对Idea的action来进行定制,程序员可以根据自己的编程习惯来定制出一个键盘流来.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5edbaa8" class="outline-3"&gt;
&lt;h3 id="org5edbaa8"&gt;&lt;a id="ID-0A6CB64D-16EF-4251-BF41-592D3E1FE2DB"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5edbaa8"&gt;
&lt;p&gt;
&lt;a href="https://github.com/JetBrains/ideavim"&gt;https://github.com/JetBrains/ideavim&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeff3088" class="outline-2"&gt;
&lt;h2 id="orgeff3088"&gt;&lt;a id="ID-8B7FB695-0353-4B60-BAD5-A2B925431EA9"&gt;&lt;/a&gt;emacsIDEAs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeff3088"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org47a86fd" class="outline-3"&gt;
&lt;h3 id="org47a86fd"&gt;&lt;a id="ID-997170C1-0DA9-4F3C-A9D1-B12FB18D206D"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org47a86fd"&gt;
&lt;p&gt;
支持一些Emacs操作的Idea插件,主要是一些复制,移动,替换,跳转的快捷操作,目前使用最多的是快速查找替换.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2df8b84" class="outline-3"&gt;
&lt;h3 id="org2df8b84"&gt;&lt;a id="ID-AA572D98-2A6F-47B3-88D2-B18E07DB7462"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2df8b84"&gt;
&lt;p&gt;
&lt;a href="https://github.com/whunmr/emacsIDEAs"&gt;https://github.com/whunmr/emacsIDEAs&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3395824" class="outline-2"&gt;
&lt;h2 id="org3395824"&gt;&lt;a id="ID-B969793C-24F1-4262-A1FB-854D3CDB255C"&gt;&lt;/a&gt;Custom Postfix Templates&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3395824"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6720a57" class="outline-3"&gt;
&lt;h3 id="org6720a57"&gt;&lt;a id="ID-0963FC40-203D-4F55-8365-83BB943735DE"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6720a57"&gt;
&lt;p&gt;
Idea中非常高效的就是postfix，但是系统自带不可以进行增加，这个插件就可以让用户可以自定义一些高级的postfix语句来提高效率。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeaf5704" class="outline-3"&gt;
&lt;h3 id="orgeaf5704"&gt;&lt;a id="ID-09C4479D-0AF0-41AA-B8F5-2EA0F264F9E9"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgeaf5704"&gt;
&lt;p&gt;
&lt;a href="https://github.com/xylo/intellij-postfix-templates"&gt;https://github.com/xylo/intellij-postfix-templates&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbdc50c4" class="outline-2"&gt;
&lt;h2 id="orgbdc50c4"&gt;&lt;a id="ID-3A990891-E12B-4B6A-A685-474A3896CACB"&gt;&lt;/a&gt;Jrebel&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbdc50c4"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb8420ec" class="outline-3"&gt;
&lt;h3 id="orgb8420ec"&gt;&lt;a id="ID-3D07DD35-361D-47E7-BA2B-EFB07420B37B"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb8420ec"&gt;
&lt;p&gt;
动态部署代码插件,可以在不重启Tomcat的情况下进行代码的热部署，提高开发效率没得说。先前可以使用twitter号来免费使用，现在不行，需要自行购买了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org04f1813" class="outline-3"&gt;
&lt;h3 id="org04f1813"&gt;&lt;a id="ID-99E30349-2E94-48FF-BA2C-25CD5BABCDDA"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org04f1813"&gt;
&lt;p&gt;
&lt;a href="https://zeroturnaround.com/software/jrebel/"&gt;https://zeroturnaround.com/software/jrebel/&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org33280a9" class="outline-2"&gt;
&lt;h2 id="org33280a9"&gt;&lt;a id="ID-420C1FCA-6B61-4340-B61B-DD8DC6191B3A"&gt;&lt;/a&gt;CamelCase&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org33280a9"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf0bbbe5" class="outline-3"&gt;
&lt;h3 id="orgf0bbbe5"&gt;&lt;a id="ID-92D90573-F916-40CB-BE11-488048017BFA"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf0bbbe5"&gt;
&lt;p&gt;
文本驼峰规则快速转换，支持从CamelCase-&amp;gt;camelCaase-&amp;gt;camel&lt;sub&gt;case&lt;/sub&gt;-&amp;gt;camel-case-&amp;gt;CAMEL&lt;sub&gt;CASE的顺序转换&lt;/sub&gt;，idea中只支持全部大写与全部小写的转换.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0305e47" class="outline-3"&gt;
&lt;h3 id="org0305e47"&gt;&lt;a id="ID-07FFBC99-11D2-48B3-872E-26192C98E0D8"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0305e47"&gt;
&lt;p&gt;
&lt;a href="https://plugins.jetbrains.com/plugin/7160-camelcase"&gt;https://plugins.jetbrains.com/plugin/7160-camelcase&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org523d753" class="outline-2"&gt;
&lt;h2 id="org523d753"&gt;&lt;a id="ID-E41C2EB4-6736-474C-9D8E-B37CD3C91F38"&gt;&lt;/a&gt;codehelper&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org523d753"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeb18b6b" class="outline-3"&gt;
&lt;h3 id="orgeb18b6b"&gt;&lt;a id="ID-B31581DF-8D48-4DC7-A265-24184A4FB35F"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgeb18b6b"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;代码自动生成插件，支持根据Pojo名来生成dao,mapper,xml等文件，目前使用较少&lt;/li&gt;
&lt;li&gt;生成实体类的setter方法，使用频率高，主要是生成类的setter方法，配合F2查找下一个错误而使焦点至上而下，操作起来非常顺畅。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb17a769" class="outline-3"&gt;
&lt;h3 id="orgb17a769"&gt;&lt;a id="ID-7B17DC11-1D52-42B1-8F37-72AB73457680"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb17a769"&gt;
&lt;p&gt;
&lt;a href="https://github.com/zhengjunbase/codehelper.generator"&gt;https://github.com/zhengjunbase/codehelper.generator&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0c6c0ab" class="outline-2"&gt;
&lt;h2 id="org0c6c0ab"&gt;&lt;a id="ID-A2253F22-B0FB-40A5-A9F4-CFF277190BBB"&gt;&lt;/a&gt;Translation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0c6c0ab"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6278e5d" class="outline-3"&gt;
&lt;h3 id="org6278e5d"&gt;&lt;a id="ID-F03E03F4-6172-4E1D-976D-F0C5B570D5F9"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6278e5d"&gt;
&lt;p&gt;
Idea中集成翻译功能,目前支持有道和goolge,百度翻译.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb13840b" class="outline-3"&gt;
&lt;h3 id="orgb13840b"&gt;&lt;a id="ID-4773A673-602D-4C6B-BA15-9B5E9A3B0E61"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb13840b"&gt;
&lt;p&gt;
&lt;a href="https://github.com/izhangzhihao/intellij-rainbow-brackets"&gt;https://github.com/izhangzhihao/intellij-rainbow-brackets&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org31c1c94" class="outline-2"&gt;
&lt;h2 id="org31c1c94"&gt;&lt;a id="ID-F4C27BD0-DF84-49ED-8F3D-94ECC6979167"&gt;&lt;/a&gt;Clock&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org31c1c94"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3c4a022" class="outline-3"&gt;
&lt;h3 id="org3c4a022"&gt;&lt;a id="ID-B088CD6F-394A-483B-8159-C8503406E536"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3c4a022"&gt;
&lt;p&gt;
当你全屏投入工作时，想知道当前的时间，需要切换出全屏模式，这样就打乱了节奏，这个插件可以在Idea的右下方显示出当前的时间信息，非常实用。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8e7330b" class="outline-3"&gt;
&lt;h3 id="org8e7330b"&gt;&lt;a id="ID-0DA7621F-D518-4BD7-BEDB-B9F54D11912E"&gt;&lt;/a&gt;插件地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8e7330b"&gt;
&lt;p&gt;
&lt;a href="https://github.com/amolenaar/idea-clock"&gt;https://github.com/amolenaar/idea-clock&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6dab9f9" class="outline-2"&gt;
&lt;h2 id="org6dab9f9"&gt;&lt;a id="ID-53A2EC4A-0D57-482E-96A9-CD1FD0EC9BCE"&gt;&lt;/a&gt;Dash&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6dab9f9"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3bca206" class="outline-3"&gt;
&lt;h3 id="org3bca206"&gt;&lt;a id="ID-F215A191-DF19-406C-9A27-73D0D295F28B"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3bca206"&gt;
&lt;p&gt;
Dash是一个mac上的开发文档查询工具,Idea Dash这个插件使得开发者可以直接通过快捷键来调用Dash工具进行文档的查询.目前这个插件提供了对Dash,Velocity,Zeald三种工具的支持.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0beaaf8" class="outline-3"&gt;
&lt;h3 id="org0beaaf8"&gt;&lt;a id="ID-AE664191-A8B1-47CB-B1C9-CF7BF034DDA2"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0beaaf8"&gt;
&lt;p&gt;
&lt;a href="https://github.com/gdelmas/IntelliJDashPlugin"&gt;https://github.com/gdelmas/IntelliJDashPlugin&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5eb8bd4" class="outline-2"&gt;
&lt;h2 id="org5eb8bd4"&gt;&lt;a id="ID-40EEAE95-B5BB-4515-81DE-47D07B1BA622"&gt;&lt;/a&gt;Rainbow Brackets&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5eb8bd4"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6ba87c3" class="outline-3"&gt;
&lt;h3 id="org6ba87c3"&gt;&lt;a id="ID-7703CC72-0D60-4F12-9A8A-178BA3FB0602"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6ba87c3"&gt;
&lt;p&gt;
让Idea的括号更好看，对于对应的括号(标签)会显示相同的颜色，特别对于编写html时的标签对应，一眼就可以看出来标签是不是对应出现的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga194780" class="outline-3"&gt;
&lt;h3 id="orga194780"&gt;&lt;a id="ID-766072E8-6980-4E0A-BBE0-DE08F42598E9"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga194780"&gt;
&lt;p&gt;
&lt;a href="https://github.com/izhangzhihao/intellij-rainbow-brackets"&gt;https://github.com/izhangzhihao/intellij-rainbow-brackets&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb0168ed" class="outline-2"&gt;
&lt;h2 id="orgb0168ed"&gt;&lt;a id="ID-BDB0AC3F-0791-48E6-BA37-179AAE9AEC0F"&gt;&lt;/a&gt;RestfulTools&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb0168ed"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdba74f5" class="outline-3"&gt;
&lt;h3 id="orgdba74f5"&gt;&lt;a id="ID-9911BAA8-A380-4FC1-9283-4405940475E8"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdba74f5"&gt;
&lt;p&gt;
此项目可以快速查询Springmvc项目中Controller的Mapping定义，即根据url来跳转方法定义，在原有Idea的按类、按文件、按方法名查找功能上增添新的查找功能。非常好用。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1257283" class="outline-3"&gt;
&lt;h3 id="org1257283"&gt;&lt;a id="ID-ED1A889A-378D-40D7-AA74-A0A346869560"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1257283"&gt;
&lt;p&gt;
&lt;a href="https://plugins.jetbrains.com/plugin/10292-restfultoolkit"&gt;https://plugins.jetbrains.com/plugin/10292-restfultoolkit&lt;/a&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org57b3c66" class="outline-2"&gt;
&lt;h2 id="org57b3c66"&gt;&lt;a id="ID-216DEF52-C09E-4EEA-8AD1-FA947CD190CC"&gt;&lt;/a&gt;Duplicate Lines&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org57b3c66"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org595bea4" class="outline-3"&gt;
&lt;h3 id="org595bea4"&gt;&lt;a id="ID-2B79D77B-D3E8-4593-9C98-2D6BAD9A9054"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org595bea4"&gt;
&lt;p&gt;
这是一个快速复制行内容的插件,Idea默认也是支持复制行的操作,当你选中了括号中的文字时再想进行复制编辑时这个插件就可以发挥作用了,它会复制行的内容,并将光标置于被复制行时选中的字符上,这样就可以接着进行复制后的修改操作了.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4e20cd2" class="outline-3"&gt;
&lt;h3 id="org4e20cd2"&gt;&lt;a id="ID-6476EC26-645B-4080-97B1-4F102671F10C"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4e20cd2"&gt;
&lt;p&gt;
&lt;a href="https://github.com/xusoo/duplicate-lines-intellij-plugin"&gt;https://github.com/xusoo/duplicate-lines-intellij-plugin&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org922d1d4" class="outline-2"&gt;
&lt;h2 id="org922d1d4"&gt;&lt;a id="ID-222E0010-CC4E-4D8B-A645-190AB5F06678"&gt;&lt;/a&gt;FindBugs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org922d1d4"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org387eede" class="outline-3"&gt;
&lt;h3 id="org387eede"&gt;&lt;a id="ID-E5C1765E-A2C7-423F-A57C-A8C4DDDEB5BA"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org387eede"&gt;
&lt;p&gt;
静态代码bug查找工具,帮程序员在编写时发现一些错误的代码问题,支持200多个分析规则.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1bc7ec8" class="outline-3"&gt;
&lt;h3 id="org1bc7ec8"&gt;&lt;a id="ID-F9E78623-439D-4951-B113-AA49CB5E4DAF"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1bc7ec8"&gt;
&lt;p&gt;
&lt;a href="http://andrepdo.github.io/findbugs-idea/"&gt;http://andrepdo.github.io/findbugs-idea/&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9c25c8d" class="outline-2"&gt;
&lt;h2 id="org9c25c8d"&gt;&lt;a id="ID-71C062FA-7106-4556-AD1B-7A5E2727F556"&gt;&lt;/a&gt;JSON Viewer&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9c25c8d"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org629cc1b" class="outline-3"&gt;
&lt;h3 id="org629cc1b"&gt;&lt;a id="ID-705D4294-9625-484A-8973-385A9059C3C1"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org629cc1b"&gt;
&lt;p&gt;
在Idea中进行json的格式化与查看工具.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf8cd401" class="outline-3"&gt;
&lt;h3 id="orgf8cd401"&gt;&lt;a id="ID-56A64E85-92BA-4D7A-831A-61FF7A609B91"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf8cd401"&gt;
&lt;p&gt;
&lt;a href="https://github.com/potterhsu/JsonViewer"&gt;https://github.com/potterhsu/JsonViewer&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7be28ba" class="outline-2"&gt;
&lt;h2 id="org7be28ba"&gt;&lt;a id="ID-4862DD4F-1F8A-494E-B4EB-464097979D07"&gt;&lt;/a&gt;Json2Java4Idea&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7be28ba"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2519ab3" class="outline-3"&gt;
&lt;h3 id="org2519ab3"&gt;&lt;a id="ID-39E40656-B768-40F4-B012-A9E54030DA42"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2519ab3"&gt;
&lt;p&gt;
根据Json数据来生成Java类的工具,支持Jackson,Json,Moshi.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb423056" class="outline-3"&gt;
&lt;h3 id="orgb423056"&gt;&lt;a id="ID-E62B7480-B68F-49C2-8597-CBA460BA6D6B"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb423056"&gt;
&lt;p&gt;
&lt;a href="https://github.com/t28hub/json2java4idea"&gt;https://github.com/t28hub/json2java4idea&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5db64c6" class="outline-2"&gt;
&lt;h2 id="org5db64c6"&gt;&lt;a id="ID-93A20935-D6FD-4B80-A530-AB6F64241252"&gt;&lt;/a&gt;LivePlugin&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5db64c6"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd406da4" class="outline-3"&gt;
&lt;h3 id="orgd406da4"&gt;&lt;a id="ID-06CAFD2F-F281-45E5-952F-DB4F013F5882"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd406da4"&gt;
&lt;p&gt;
在不重启Idea情况下来编写Idea插件,可以编写一些小的功能插件.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7d50cea" class="outline-3"&gt;
&lt;h3 id="org7d50cea"&gt;&lt;a id="ID-EFC0B80A-9CA6-42CB-89FA-8C225C73D47A"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7d50cea"&gt;
&lt;p&gt;
&lt;a href="https://github.com/dkandalov/live-plugin"&gt;https://github.com/dkandalov/live-plugin&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge0f6472" class="outline-2"&gt;
&lt;h2 id="orge0f6472"&gt;&lt;a id="ID-9BC31DA0-8713-4A02-9CD0-1C76D3925086"&gt;&lt;/a&gt;Lombok&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge0f6472"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4c97807" class="outline-3"&gt;
&lt;h3 id="org4c97807"&gt;&lt;a id="ID-44234C4B-1DED-429C-97FD-CFADBE345AA7"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4c97807"&gt;
&lt;p&gt;
&lt;a href="https://projectlombok.org/"&gt;Lombox&lt;/a&gt;的Idea插件,使用注释的方式来快速处理getter和setter,当然功能不止这些.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org104c976" class="outline-3"&gt;
&lt;h3 id="org104c976"&gt;&lt;a id="ID-F8250121-75E2-4026-8C70-F86ADC7B532F"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org104c976"&gt;
&lt;p&gt;
&lt;a href="https://github.com/mplushnikov/lombok-intellij-plugin"&gt;https://github.com/mplushnikov/lombok-intellij-plugin&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org22fbff7" class="outline-2"&gt;
&lt;h2 id="org22fbff7"&gt;&lt;a id="ID-3D44E02D-75D3-4F35-A811-6A71C969558B"&gt;&lt;/a&gt;PlantUML&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org22fbff7"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb2bf55b" class="outline-3"&gt;
&lt;h3 id="orgb2bf55b"&gt;&lt;a id="ID-6632D887-D803-4263-A657-A74903FB33AD"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb2bf55b"&gt;
&lt;p&gt;
在Idea中进行uml图的处理.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org28688fc" class="outline-3"&gt;
&lt;h3 id="org28688fc"&gt;&lt;a id="ID-0BACA036-041F-4283-98D2-D8D0958A91F0"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org28688fc"&gt;
&lt;p&gt;
&lt;a href="https://github.com/esteinberg/plantuml4idea"&gt;https://github.com/esteinberg/plantuml4idea&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7565e69" class="outline-2"&gt;
&lt;h2 id="org7565e69"&gt;&lt;a id="ID-770E6BFF-E664-4171-9687-59F3D64652D2"&gt;&lt;/a&gt;POJO to JSON&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7565e69"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org87bb131" class="outline-3"&gt;
&lt;h3 id="org87bb131"&gt;&lt;a id="ID-9B1B84F1-BE93-44A7-8129-39B667B7B737"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org87bb131"&gt;
&lt;p&gt;
Java类型转成JSON,方便用postman或者curl的时候构造JSON body.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org98aa151" class="outline-3"&gt;
&lt;h3 id="org98aa151"&gt;&lt;a id="ID-1DDC8D32-2723-45E2-9517-B23EA1B86FAD"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org98aa151"&gt;
&lt;p&gt;
&lt;a href="https://plugins.jetbrains.com/plugin/9686-pojo-to-json"&gt;https://plugins.jetbrains.com/plugin/9686-pojo-to-json&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga3ad124" class="outline-2"&gt;
&lt;h2 id="orga3ad124"&gt;&lt;a id="ID-C32E200E-6351-4A17-A1C6-B542E6D50FC0"&gt;&lt;/a&gt;Save Actions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga3ad124"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc4a7021" class="outline-3"&gt;
&lt;h3 id="orgc4a7021"&gt;&lt;a id="ID-39B4C512-ABC5-47B0-9BBE-25DBEB377F45"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc4a7021"&gt;
&lt;p&gt;
Idea的保存动作的执行插件,支持在保存后执行一些命令,比如重新导入包,格式化代码,重新整理代码等.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org22bb7e2" class="outline-3"&gt;
&lt;h3 id="org22bb7e2"&gt;&lt;a id="ID-BBDCBF13-7A09-4010-8A61-BD0A9D016163"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org22bb7e2"&gt;
&lt;p&gt;
&lt;a href="https://github.com/dubreuia/intellij-plugin-save-actions"&gt;https://github.com/dubreuia/intellij-plugin-save-actions&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org18f0686" class="outline-2"&gt;
&lt;h2 id="org18f0686"&gt;&lt;a id="ID-53786D1D-D25F-4C49-8DC0-BC788CCF258C"&gt;&lt;/a&gt;Spring Assistant&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org18f0686"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4423b53" class="outline-3"&gt;
&lt;h3 id="org4423b53"&gt;&lt;a id="ID-8E4565A9-0C70-4D2E-94DF-681BA976BBE5"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4423b53"&gt;
&lt;p&gt;
Springboot配置文件编写助手,在编写些插件会给出一些提示,帮助开发者可以更快速的进行配置.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org029e0ca" class="outline-3"&gt;
&lt;h3 id="org029e0ca"&gt;&lt;a id="ID-B2F1472D-DD59-4E87-B433-27E0A66C1B4C"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org029e0ca"&gt;
&lt;p&gt;
&lt;a href="https://github.com/1tontech/intellij-spring-assistant"&gt;https://github.com/1tontech/intellij-spring-assistant&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org863c77b" class="outline-2"&gt;
&lt;h2 id="org863c77b"&gt;&lt;a id="ID-2227AFF4-D43D-40C7-AC1E-58FEE6130215"&gt;&lt;/a&gt;String Mainpulatin&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org863c77b"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org469deed" class="outline-3"&gt;
&lt;h3 id="org469deed"&gt;&lt;a id="ID-5D800849-91BA-464D-8A68-4343D90FEAF8"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org469deed"&gt;
&lt;p&gt;
String字符操作插件,支持CamelCase插件的功能,另外还支持Encode,Decode,对齐,trim等操作,功能很强大.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf787ecb" class="outline-3"&gt;
&lt;h3 id="orgf787ecb"&gt;&lt;a id="ID-CE7F0FAD-5D92-468B-8215-F397BF83EB78"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf787ecb"&gt;
&lt;p&gt;
&lt;a href="https://github.com/krasa/StringManipulation"&gt;https://github.com/krasa/StringManipulation&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge10ca0f" class="outline-2"&gt;
&lt;h2 id="orge10ca0f"&gt;&lt;a id="ID-3B1AD184-10E2-4DF9-8C04-2EA3600A56A8"&gt;&lt;/a&gt;TestMe&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge10ca0f"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5708dd4" class="outline-3"&gt;
&lt;h3 id="org5708dd4"&gt;&lt;a id="ID-B3586F18-BC0B-4F36-A28B-B00A4DD56DC8"&gt;&lt;/a&gt;插件说明&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5708dd4"&gt;
&lt;p&gt;
Junit等测试工具的生成插件,支持Junit4/5,TestNG,Spock等测试框架代码的生成.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge600f61" class="outline-3"&gt;
&lt;h3 id="orge600f61"&gt;&lt;a id="ID-47722D0E-DD38-4FAF-8801-0725E5335B57"&gt;&lt;/a&gt;项目地址&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge600f61"&gt;
&lt;p&gt;
&lt;a href="https://github.com/wrdv/testme-idea"&gt;https://github.com/wrdv/testme-idea&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>idea</category><category>plugin</category><guid>http://blog.imcompany.cn/posts/na-xie-ti-gao-xiao-lu-de-ideacha-jian/</guid><pubDate>Wed, 05 Sep 2018 00:12:23 GMT</pubDate></item><item><title>设计模式学习之代理模式</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-dai-li-mo-shi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div id="outline-container-orgefb8c57" class="outline-2"&gt;
&lt;h2 id="orgefb8c57"&gt;&lt;a id="ID-5106DED6-E60F-47AF-9FED-C24E5A9146D2"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgefb8c57"&gt;
&lt;p&gt;
代理模式是设计模式中使用频率非常的高的模式，像日常生活中的房产中介、外卖平台都属于代理。代理模式就是在访问真正的业务之时不会直接与真正的业务进行调用，而是与一个与真正业务对象有着相同功能声明的代理来进行处理，但是最终的处理还是由真正的业务类来进行（决定），比如房产中介，他们会帮助找房者根据条件来对可选房屋进行筛选，但是最终订与不订的权利还是由找房者来决定。常见的代理有保护代理、虚拟代理、远程代理。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9d59544" class="outline-2"&gt;
&lt;h2 id="org9d59544"&gt;&lt;a id="ID-8FA1D55F-C6F7-4666-9E13-0D33878BB72E"&gt;&lt;/a&gt;代理模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9d59544"&gt;
&lt;p&gt;
我们常用的后台系统一般会根据用户权限的不同对用户展示不同的业务菜单，拥有高权限的人会展示相对多的菜单进行操作，在这个过程中还要记录用户的操作日志，用户点了什么，执行了什么操作都需要进行记录，达到有据可查。在这个业务场景下，就可以使用代理模式进行实现。代理对象会持有一个真正业务对象的实例，在代理对象中还引用日志服务与权限服务，所有的请求都经过这个代理类来进行，这样就可以根据操作的用户的状态来进行相应的处理了。具体的代码实现如下：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;定义一个查询接口，在这里定义一个查询用户收的方法，如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.proxy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/28.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Search&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;queryIncome&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;再定义一个实现该接口的具体业务类：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.proxy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/28.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SearchService&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;queryIncome&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"开始查询"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

	  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt;

	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"查询完成"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在上面代码中就实现了查询收入的方法，简单的打印了两行日志。
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;由于在实现需要对权限进行控制并记录日志，则先把需要用来的权限类与日志类进行定义与实现。实现代码如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.proxy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/28.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Auth&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;valid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"admin"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;


  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;beforeLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"开始记录"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"查询日志"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;afterLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"结束记录"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"查询日志"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;最后来进行代理类的实现，代理类通常也会实现查询接口，这样在调用者看来它与真正的业务类没有什么区别，实现代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.proxy&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/28.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SearchProxy&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Auth&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SearchService&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;queryIncome&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;beforeLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;queryIncome&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt;
	  &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;afterLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在上面的代理中，它维护了权限与日志这两个工具类的实例，还维护真正提供查询的业务类实例，在实现的查询收入接口中，先进行进入日志的记录，再验证用户的权限，验证通过则调用真正的业务类来查询收入，最后记录结束的日志，一次调用处理完成。
上面实现的类图如下：
&lt;img src="http://blog.imcompany.cn/images/proxy.png" alt="proxy"&gt;
主要的核心都在代理类中，它对整个的流程进行全面的控制，对真正的业务方法进行了保护，只有满足条件的请求才可以被处理。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org081fad1" class="outline-2"&gt;
&lt;h2 id="org081fad1"&gt;&lt;a id="ID-A325E1A4-121E-4085-B642-1C5E0357D188"&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org081fad1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5fb135f" class="outline-3"&gt;
&lt;h3 id="org5fb135f"&gt;&lt;a id="ID-2442F02B-79E2-4793-A708-88BEC217A441"&gt;&lt;/a&gt;优点&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5fb135f"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;代理模式使得具体的业务方法在不想过多的暴露自己的情况更好的保护了具体业务，很好的隔离了调用者与被调用者，降低了系统的耦合性。&lt;/li&gt;
&lt;li&gt;对真正业务的修改对调用者是无感知的，它们只需要与代理打交道就可以，符合开闭原则。&lt;/li&gt;
&lt;li&gt;保护代理可以对访问进行细粒度的控制。&lt;/li&gt;
&lt;li&gt;对于虚拟代理可以对于耗费资源的大对象进行一个简单代理，在用户使用再调用时真正的对象已经实例化完毕，给了用户更好的体验。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge434ba8" class="outline-3"&gt;
&lt;h3 id="orge434ba8"&gt;&lt;a id="ID-E2C27CC5-1C83-4FE5-9305-3AC702D6CA9D"&gt;&lt;/a&gt;缺点&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge434ba8"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;由于在中间增加了代理，多了一些额外的处理，对于处理速度会有一定的降低。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-dai-li-mo-shi/</guid><pubDate>Mon, 16 Jul 2018 13:08:28 GMT</pubDate></item><item><title>设计模式学习之委托模式</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-wei-tuo-mo-shi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div id="outline-container-org15f5104" class="outline-2"&gt;
&lt;h2 id="org15f5104"&gt;&lt;a id="ID-AC010333-BEEE-4816-8429-F348912688BA"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org15f5104"&gt;
&lt;p&gt;
委托模式不属于23种设计模式中，但是它在Spring框架中使用的很频繁，Spring的作用在Java的开发是非常大，所以需要学习一下委托模式。委托模式是指两个对象都有相同的方法与功能，比如A、B两个对象都有相同的方法，但是有调用A的method方法，A不会自己来处理而是直接调用了B的同名方法，由两个对象参与同一个请求，接受请求的对象将委托给另一个对象来处理。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfe8f69f" class="outline-2"&gt;
&lt;h2 id="orgfe8f69f"&gt;&lt;a id="ID-59ADDF7B-BDA4-4D49-9A44-C72DC76E95FE"&gt;&lt;/a&gt;委托模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfe8f69f"&gt;
&lt;p&gt;
在一般的公司中，都会分为老板、项目经理、开发人员结构，老板负责制定决策，分配给项目经理后，他不会自己来完成，而是把需要的功能进行分解，交给擅长的开发人员进行实现。虽然项目经理也可以完成，但是是他把这些事情委托给了多个开发人员来做，加快了完成任务的速度。就以这个需求来说，使用委托模式来进行实现:
&lt;/p&gt;

&lt;p&gt;
定义抽象的人类接口：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.delegate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/27.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showSkill&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面代码中定义了抽象的人类接口，显示这个人的名字，拥有的技能，工作的状态情况，接下来实现需求中的每个人。
&lt;/p&gt;

&lt;p&gt;
定义老板(BOSS):
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.delegate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/27.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Boss&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i am boss"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showSkill&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"send commend"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
定义项目经理和员工:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.delegate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/27.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Leader&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="n"&gt;developerA&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="n"&gt;developerB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDeveloperA&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="n"&gt;developerA&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;developerA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;developerA&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDeveloperB&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="n"&gt;developerB&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;developerB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;developerB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i am leader"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showSkill&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;showName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i want to select member to doWork"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
	  &lt;span class="n"&gt;showSkill&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;developerA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;developerB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DeveloperA&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i am developer a"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showSkill&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;showName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i can do login function"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;showSkill&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"start work login"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DeveloperB&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i am developer b"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showSkill&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;showName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i can do pay function"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;showSkill&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"start do pay"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在上面代码中，定义一个项目经理与两个开发，在项目经理中维护(管理)着对两个开发的引用。这样在项目经理的doWork中其实是调用开发者A与开发者B的doWork来都完成工作。接下来测试一下：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.delegate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/27.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WorkTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;Boss&lt;/span&gt; &lt;span class="n"&gt;boss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Boss&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;boss&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;showName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;boss&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;showSkill&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

	  &lt;span class="n"&gt;Leader&lt;/span&gt; &lt;span class="n"&gt;leader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Leader&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="n"&gt;memberA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DeveloperA&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="n"&gt;memberB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DeveloperB&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

	  &lt;span class="n"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDeveloperA&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memberA&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDeveloperB&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memberB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

	  &lt;span class="n"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doWork&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
BOSS下发了一个工作，由项目经理选择要真正来工作的人，最后调用了项目经理的doWork方法来实现需求，其实是DeveloperA与DeveloperB在真正的工作，对于BOSS而言，他不在乎谁在工作，他只要结果，结果导向嘛。。。苦了我们这帮程序员。
&lt;/p&gt;

&lt;p&gt;
整体的类图结构:
&lt;img src="http://blog.imcompany.cn/images/delegate.png" alt="委托模式"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdd80e58" class="outline-2"&gt;
&lt;h2 id="orgdd80e58"&gt;&lt;a id="ID-E78E8A6B-D26C-4481-9629-38ABB83D57AE"&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdd80e58"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;委托模式定义了实现功能的窗口，对于具体的实现由谁实现对于调用者是无感知的，对外提供方换了内部的实现对于调用方无影响。最大限度的实现了解耦&lt;/li&gt;
&lt;li&gt;委托方的功能简单通用，可以在绝大情况下通用，在框架中使用非常适合，可以实现分层解耦&lt;/li&gt;
&lt;li&gt;委托模式使用我们可以使用组合来代替继承&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-wei-tuo-mo-shi/</guid><pubDate>Sat, 07 Jul 2018 10:53:57 GMT</pubDate></item><item><title>设计模式学习之观察者</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-guan-cha-zhe/</link><dc:creator>Tomyli</dc:creator><description>&lt;div id="outline-container-org1daf244" class="outline-2"&gt;
&lt;h2 id="org1daf244"&gt;&lt;a id="ID-8B1369E7-771F-4568-84A2-68681795C0D4"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1daf244"&gt;
&lt;p&gt;
观察者模式在日常开发中使用频率也是非常高的，它建立了对象与对象之间的关系，一个对象的行为改变会通知到另一个对象，被通知的对象根据通知做出相应的处理动作。在观察者中分为目标对象（被观察者）、观察者。观察者模式是一种对象行为模式。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc3eb745" class="outline-2"&gt;
&lt;h2 id="orgc3eb745"&gt;&lt;a id="ID-DF91D356-308F-4653-B691-EEDBD8E73380"&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc3eb745"&gt;
&lt;p&gt;
现在很多人都购买股票，在市面上有很多的股票软件供广大股民使用。股票软件一般会在用户关注的股票有变动时发送消息来通知股民。在这里，某一支股票就是目标对象，广大股民与股票软件就是观察者，他们根据股票的行情变化来做出相应买入或者卖出操作。这一需求可以使用观察者模式进行实现。代码如下：
&lt;/p&gt;

&lt;p&gt;
先来定义一个抽象的购买股票的股民们，他们有喜有悲的心情:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.observer.stock&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/23.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Buyer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;happy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sad&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
再来定义具体的股民行为实现类：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.observer.stock&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/23.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConcrectBuyer&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Buyer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;happy&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;":happy"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sad&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;":sad"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
具体的股民实现了喜与悲的方法，这样观察者已经准备就绪。下面来定义股票软件：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.observer.stock&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/23.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;StockSoft&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;goUp&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;goDown&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面定义了一个抽象的股票软件，它有两个方法，一个股票上涨，一个是股票下跌。接下来实现具体的股票软件
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.observer.stock&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.ArrayList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/23.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConcreteStockSoft&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;StockSoft&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Buyer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;buyerList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ConcreteStockSoft&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;buyerList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Buyer&lt;/span&gt; &lt;span class="n"&gt;buyer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;buyerList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buyer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;quit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Buyer&lt;/span&gt; &lt;span class="n"&gt;buyer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;buyerList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buyer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;goUp&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;buyerList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Buyer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;happy&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;goDown&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;buyerList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Buyer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;sad&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
这是一个具体的股票软件，它持有一个购买指定股票的股民列表，还有股民加入与退出的方法，实现了股票上涨时的方法，在上涨时会通知股民，调用股民的happy方法，在股票下跌时调用股民的sad方法。接着做一下测试:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.observer.stock&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/23.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StockTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;ConcreteStockSoft&lt;/span&gt; &lt;span class="n"&gt;niuStock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcreteStockSoft&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

	  &lt;span class="n"&gt;ConcrectBuyer&lt;/span&gt; &lt;span class="n"&gt;buyer1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buyer2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buyer3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	  &lt;span class="n"&gt;buyer1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcrectBuyer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;buyer1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"buyer1"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;buyer2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcrectBuyer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;buyer2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"buyer2"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;buyer3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcrectBuyer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;buyer3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"buyer3"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

	  &lt;span class="n"&gt;niuStock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buyer1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;niuStock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buyer2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;niuStock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buyer3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

	  &lt;span class="n"&gt;niuStock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;goUp&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

	  &lt;span class="n"&gt;niuStock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;quit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buyer1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;niuStock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;goDown&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在测试类中定义了三位购买股票的股民，股票软件把他们加入到维护的股民列表中，这时股票软件发现股票涨了，就调用goUp方法通知了列表中购买股票的股民们。接着股民1选择了卖出股票，则他在软件的维护列表中被移除，这时股票软件发现股票跌了，此时再一次通知持有股票的股民们，这时股民1已经收不到任何的通知，因为他已经不股票软件的通知列表中，此时只股民2与股民3在那悲伤中…
&lt;/p&gt;

&lt;p&gt;
实现的观察者模式的类图：
&lt;img src="http://blog.imcompany.cn/images/observer.png" alt="观察者模式-股票软件实现"&gt;
表面上看股票软件与股民没有任何关系，但是在具体股票软件中维护了股民的列表(buyList)，这样可以在软件发现有变化时调用股民的方法来进行通知。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org044d908" class="outline-2"&gt;
&lt;h2 id="org044d908"&gt;&lt;a id="ID-50C04142-CF97-4997-BCDA-C650E6064FE8"&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org044d908"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6879d26" class="outline-3"&gt;
&lt;h3 id="org6879d26"&gt;&lt;a id="ID-A9F3D255-D072-4E23-9940-D47A216D0CC3"&gt;&lt;/a&gt;优点&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6879d26"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;观察者模式在观察者与目标对象之间建立了抽象的耦合，目标对象要维护观察者列表，而无须关心具体的观察者。可以更好的进行抽象。&lt;/li&gt;
&lt;li&gt;对目标对象增加观察者无须修改原代码，只需要调用现有的方法就可以，符合开闭原则。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdb259af" class="outline-3"&gt;
&lt;h3 id="orgdb259af"&gt;&lt;a id="ID-EB1CEDE6-F922-4F8E-B967-B0759B18C007"&gt;&lt;/a&gt;缺点&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdb259af"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;在观察者很多的时候，目标对象发生变化时会消耗很长的时间来通知观察者。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-guan-cha-zhe/</guid><pubDate>Wed, 04 Jul 2018 12:31:41 GMT</pubDate></item><item><title>设计模式学习之装饰器</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-zhuang-shi-qi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div id="outline-container-orge016d6c" class="outline-2"&gt;
&lt;h2 id="orge016d6c"&gt;&lt;a id="ID-9F831376-652F-49A6-81C3-04B7B7D028F9"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge016d6c"&gt;
&lt;p&gt;
装饰器设计模式是使用比较频繁的设计模式，它在不改变原物体的情况对原物体实现了功能的增加，原物体还是一个可单独使用的个体。在JAVA的类库中应该会马上想到IO类，各种的InputStrem，OutputStrem。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgad65af2" class="outline-2"&gt;
&lt;h2 id="orgad65af2"&gt;&lt;a id="ID-108171D7-868E-409F-986B-C1D1A9A60C82"&gt;&lt;/a&gt;装饰器模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgad65af2"&gt;
&lt;p&gt;
在用户登录的中过程，我们需要对用户输入的密码进行加密操作，在设计时会提供好多种加密的算法，例如简单的BASE64加密，复杂的如MD5、DSA加密。直接把用户的密码存入数据库是真的在耍流氓。在使用这些算法时，我们想灵活的使用，比如使用完简单加密还可以再进行一下MD5的加密。针对这样的需求，可以使用装饰器模式进行实现。大体思路如下：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;加密接口，定义加密方法。&lt;/li&gt;
&lt;li&gt;在装饰器中，最原始的被装饰者是目标实现，它们一般会实现加密定义的具体方法。&lt;/li&gt;
&lt;li&gt;装饰者会针对目标对象进行装饰，所以它要同样实现加密接口的方法，一般情况下这个装饰器会定义为抽象的形式，在这个装饰器父类中维护着对目标对象的引用。&lt;/li&gt;
&lt;li&gt;具体装饰器继承抽象装饰器来实现对目标对象的真正装饰操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
以上的情况在代码上体现为如下形式：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;加密接口&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.decorator.encrypt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/25.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Encryptor&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;具体加密类，实现加密处理接口&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.decorator.encrypt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/25.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConcreteEncryptor&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Encryptor&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"base encrypt!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;抽象加密装饰器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.decorator.encrypt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/25.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EncryptDecorator&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Encryptor&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Encryptor&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;EncryptDecorator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Encryptor&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encrypt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面的抽象装饰器实现的加密接口，在这个类中维护加密接口的实体，加密方法直接调用其维护实体的加密方法。
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;具体的装饰器实现类&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.decorator.encrypt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/25.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ModEncryptDecorator&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;EncryptDecorator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ModEncryptDecorator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Encryptor&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;modEncrypt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;modEncrypt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"取模加密！"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;


  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.decorator.encrypt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/25.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConverseEncryptDecorator&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;EncryptDecorator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ConverseEncryptDecorator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Encryptor&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;converseEncrypt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;converseEncrypt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"逆向加密！"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面的代码定义了两个具体的装饰器实体，在这两个装饰器类中，加密方法中都调用了父类的加密方法，然后调用了自己实现的加密方法，这样在先前加密的基础上又进行了一次加密。达到了双重加密的效果。让我们来进行一下测试:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.decorator.encrypt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/25.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EncryptDecoratorTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;Encryptor&lt;/span&gt; &lt;span class="n"&gt;encryptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcreteEncryptor&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="c1"&gt;//进行一次简单加密&lt;/span&gt;
	  &lt;span class="n"&gt;Encryptor&lt;/span&gt; &lt;span class="n"&gt;encryptDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SimpleEncryptDecorator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encryptor&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;encryptDecorator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

	  &lt;span class="c1"&gt;//对上一次加密进行二次加密（反转加密）&lt;/span&gt;
	  &lt;span class="n"&gt;ConverseEncryptDecorator&lt;/span&gt; &lt;span class="n"&gt;converseEncryptDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConverseEncryptDecorator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encryptDecorator&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;converseEncryptDecorator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encrypt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在测试中先进行了一次简单的加密，又在第一次加密的基础上进行了二次加密，如果再想使用第三次加密，直接把二次加密的对象引用传入即可。这样可以形成很多种组合，可以满足很多加密的需求。
上面的加密类的类图如下：
&lt;img src="http://blog.imcompany.cn/images/decorator.png" alt="装饰器模式-加密"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaf28288" class="outline-2"&gt;
&lt;h2 id="orgaf28288"&gt;&lt;a id="ID-47D0831C-C96E-455F-B8EE-85F4BFEA5661"&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgaf28288"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1de894d" class="outline-3"&gt;
&lt;h3 id="org1de894d"&gt;&lt;a id="ID-534AE97F-EA50-4D4E-8763-553D50C3704D"&gt;&lt;/a&gt;优点&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1de894d"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;针对抽象编程，装饰器可以使多个类的功能进行组合，比继承更加的灵活。&lt;/li&gt;
&lt;li&gt;可以对一个对象进行多次的装饰，可以创造出具有强大功能的类。&lt;/li&gt;
&lt;li&gt;具体的构建类与装饰器分隔，想要增加一个新功能时不需要修改原代码，符合开闭原则。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfd8951a" class="outline-3"&gt;
&lt;h3 id="orgfd8951a"&gt;&lt;a id="ID-03EB89C5-34F9-4A63-BA8E-97FEECD7BA8B"&gt;&lt;/a&gt;缺点&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfd8951a"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;增加一个小的功能也需要增加一个类来实现，有些时候会有些浪费。&lt;/li&gt;
&lt;li&gt;由于实现也多重装饰，在出现问题时对于定位问题要一层一层的来处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-zhuang-shi-qi/</guid><pubDate>Mon, 02 Jul 2018 12:09:14 GMT</pubDate></item><item><title>设计模式学习之适配器</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-gua-pei-qi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div id="outline-container-orge39c3ac" class="outline-2"&gt;
&lt;h2 id="orge39c3ac"&gt;&lt;a id="ID-EB4962BA-C631-4716-BC9D-20C978873C77"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge39c3ac"&gt;
&lt;p&gt;
在&lt;a href="http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-mo-ban-mo-shi"&gt;前面&lt;/a&gt;的文章中介绍了一些关于支付相关的功能，现在转向登录，在早些时期的系统登录就是用户使用用户名与密码进行注册，注册成功后就可以进行登录了。随着时代的发展，出现很多三方的平台，它们对外提供了获取平台用户信息的功能，例如微信、qq、微博等三方登录，在接入这些三方登录时都是遵循相应的规则，老的登录的方式需要保留，对接新的登录方式还想要使用老的登录服务，这样可以使用适配器模式来实现。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3157e06" class="outline-2"&gt;
&lt;h2 id="org3157e06"&gt;&lt;a id="ID-1C175AD8-25AF-469B-82AD-6C10817DF235"&gt;&lt;/a&gt;适配器模式&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3157e06"&gt;
&lt;p&gt;
比如我们平常使用的转接头一样，就是一种适配器的模式。它使两个不相关的物体很好的关联在一起。对于要接入的新的登录方式，首先定义新的三方登录的接口，定义要使用的三方登录方式，如下代码示例：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.adapter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/22.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ThirdLogin&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;wechatLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;qqLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sinaLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
如上定义了微信、qq、微博三种登录方式，它们都是使用accessToken来进行认证，经用户同意后获取相应的用户的信息调用方使用。下面来进行具体的实现：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.adapter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/22.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThirdLoginAdapter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ThirdLogin&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;LoginService&lt;/span&gt; &lt;span class="n"&gt;loginService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ThirdLoginAdapter&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loginService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LoginService&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;wechatLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"微信获取用户信息"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;loginService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;qqLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"qq获取用户信息"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;loginService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sinaLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"微博获取用户信息"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="n"&gt;loginService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在上面的实现，并没有重新写登录的逻辑，除了要调用三方平台的代码，登录的功能是直接使用老的登录服务实现的。在这个实现类中引用了老的服务，然后使用其已经非常成熟的功能来完成登录的操作。这样以最少的代码达到了新的需求也使老的服务可以正常运行。免去了很多测试的功能点。这种适配器叫做对象适配器。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeeb9fa6" class="outline-2"&gt;
&lt;h2 id="orgeeb9fa6"&gt;&lt;a id="ID-EC4F06ED-28E5-4B9E-802F-B00E1BFCBE33"&gt;&lt;/a&gt;缺省适配器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeeb9fa6"&gt;
&lt;p&gt;
上面的登录方法比较简单，如果要适配(实现一个接口)很多的业务方法，则对于实现方是一个困难，如果不想实现所有的方法可以定义一个抽象类来实现接口的大部分方法，再继承这个类选择需要实现覆盖的方法进行处理，这样就得到了一个缺省的适配的模式。对于用户状态一般有性别、是否是VIP等一些标识信息。下面定义了一个用户的基本标识类：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.adapter.def&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/22.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IMemberService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;saveMember&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;getMember&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isGirl&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isBoy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isVip&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
对于实现类来不想一下子都实现，因为有些标识可以是默认的，比加默认情况是用户都不是VIP用户，面向男士的应用则默认isBoy返回true。这样可以先定义一个抽象来进行一些基本的实现。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.adapter.def&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/22.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AbstractMemberService&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;IMemberService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;saveMember&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;getMember&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isGirl&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isBoy&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isVip&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
接下来真正类只需要继承这个抽象类来重写一些特定的方法就可以了
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.adapter.def&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/22.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MemberService&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;AbstractMemberService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;saveMember&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"saveMember"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;getMember&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"getMember"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在上面的代码中，MemberService只需要重写saveMember和getMember方法就可以了，其它的三个方法在父类中有了默认的设置，这减少了子类实现方法的数目。缺省适配器属于类适配器，缺省适配器的结构图如下：
&lt;/p&gt;

&lt;p&gt;
&lt;img src="http://blog.imcompany.cn/images/default-adapter.png" alt="缺省适配器"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org22bee22" class="outline-2"&gt;
&lt;h2 id="org22bee22"&gt;&lt;a id="ID-C3F52076-C0E2-46AD-99C4-E445F64DA8DE"&gt;&lt;/a&gt;适配器总结&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org22bee22"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;适配器模式可以使两个不相关的类进行关联适配。可以重用原代码而且不需要修改原代码。&lt;/li&gt;
&lt;li&gt;增加了类的利用性，代码都封装在了适配器类，可以增加适配者的复用性。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-gua-pei-qi/</guid><pubDate>Tue, 26 Jun 2018 13:30:17 GMT</pubDate></item><item><title>设计模式学习之模板模式</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-mo-ban-mo-shi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div id="outline-container-org6fd85e4" class="outline-2"&gt;
&lt;h2 id="org6fd85e4"&gt;&lt;a id="ID-1D499B1D-BE98-4A3B-B9FA-BA4DEB4B4DB4"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6fd85e4"&gt;
&lt;p&gt;
在一般实现处理用户支付订单时，通常都会在一个单独的回调项目中来处理用户的支付方式回调。一般情况下，回调的处理过程都是相似的，大体的步骤就是获取参数-&amp;gt;验证参数-&amp;gt;验证签名-&amp;gt;验证支付状态（可选）-&amp;gt;订单状态为成功增加用户的充值金额。具体的过程由于不同的支付方式不同而处理的不同。这种需求可以使用模板的模板模式来实现。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge971991" class="outline-2"&gt;
&lt;h2 id="orge971991"&gt;&lt;a id="ID-D853C6D0-3137-4D2C-AE23-FC5BD4185FEE"&gt;&lt;/a&gt;模板设计模式实现&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge971991"&gt;
&lt;p&gt;
模板模式就是由一个类来声明整个处理流程的步骤，具体的实现由各个实现类来进行实现。处理的流程不变，变是就是里面具体的实现。针对上面的支付回调，可以声明一个抽象类来声明具体的流程方法，代码如下：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.callback&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Map&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/21.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PayCallback&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getParam&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;checkParam&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;validSign&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

      &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;       * 定义了一个钩子方法来让子类控制流程实现&lt;/span&gt;
&lt;span class="cm"&gt;       * @return true：强制返回，false：不强制返回&lt;/span&gt;
&lt;span class="cm"&gt;       */&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;forceReturn&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;doService&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getParam&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;checkParam&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"param fail"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt;
	  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;validSign&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"sign fail"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt;

	  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forceReturn&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
		  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"order fail"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	      &lt;span class="o"&gt;}&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt;

	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在上面的PayCallback类中声明了getParam(获取参数)，checkParam（验证参数），validSign（验证签名），验证支付状态四个步骤，具体的支付回调类要来实现这里声明的方法即可。下面是一个微信支付的回调类的代码实现：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.callback&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.HashMap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Map&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/21.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WechatPayCallback&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;PayCallback&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getParam&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"fail"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;checkParam&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;validSign&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;forceReturn&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
具体的微信回调类实现了PayCallback类声明的抽象方法，它返回的状态是状态失败，在这里面有一个forceReturn方法，可以处理是否在某一个流程进行强制的返回，在微信回调类里面是进行强制返回，下面看一下支付宝的回调类代码：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.callback&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.HashMap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Map&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/21.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AliPayCallback&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;PayCallback&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getParam&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;checkParam&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;validSign&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
对于支付宝，这里面的状态是成功，证明这一单处理成功，在支付宝回调这个类里面没有重写父类的forceReturn方法，这个方法子类可以根据需要来决定是否需要覆盖。这样父类给了子类可以控制父类流程的方法，这个方法一般叫做钩子方法，是留给子类来进行一些特殊处理的方法。子类实现这个方法就可以间接的控制父类中定义好的流程。比如在这里就可以控制遇到支付状态为失败的订单是否继续进行后续的操作。不进行了说明这一单也正确处理完成，返回给调用方正确的状态就可以了。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1ea6406" class="outline-3"&gt;
&lt;h3 id="org1ea6406"&gt;&lt;a id="ID-A4C31D79-7F92-431B-BD3D-CDA4FE8993D9"&gt;&lt;/a&gt;模板模式实现的类图&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1ea6406"&gt;
&lt;p&gt;
&lt;img src="http://blog.imcompany.cn/images/template.png" alt="模板模式"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb544947" class="outline-2"&gt;
&lt;h2 id="orgb544947"&gt;&lt;a id="ID-CF8B6416-7D0E-4B0F-BC5A-8D5CB391DB93"&gt;&lt;/a&gt;模板模式总结&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb544947"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;模板模式定义了一个具体的流程来实现功能，子类只需要实现相应定义的方法就可以达到最终的结果。增加另一种回调类也非常的容易，只需要实现父类的方法就可以了。符合开闭原则。&lt;/li&gt;
&lt;li&gt;父类可以提供子类进行流程控制的方法，这样可以实现子类的反向控制。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-mo-ban-mo-shi/</guid><pubDate>Mon, 25 Jun 2018 13:06:17 GMT</pubDate></item><item><title>设计模式学习之策略模式</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-ce-lue-mo-shi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div id="outline-container-org59a3137" class="outline-2"&gt;
&lt;h2 id="org59a3137"&gt;&lt;a id="ID-1F35F4B4-1981-4880-808D-FD4B457B30DB"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59a3137"&gt;
&lt;p&gt;
策略模式是设计模式中使用频率很高的模式，主要的就是实现对行为的包装，达到结果的方式有多种，使用者可以选择任何一个方式来得到想要结果，在增加新的方式时更加的方便与灵活。它是为了适应算法的灵活性而产生的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9ef7473" class="outline-2"&gt;
&lt;h2 id="org9ef7473"&gt;&lt;a id="ID-F6C5FFEB-1164-429F-9C99-9A3E147CB3F6"&gt;&lt;/a&gt;策略模式实现&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9ef7473"&gt;
&lt;p&gt;
以常用的购物为例，一般情况下购物分为浏览商品，下单，支付。在支付时消费者可以选择多种不同的支付方式，如支付宝、微信、京东支付、银联支付等。在支付中流程就可以使用到策略模式，网站为用户提供了这些支付方式可供选择，用户只需要选择自己喜欢的支付方式来进行充值就可以得到商品了。在一般情况下都会定义一个抽象类来定义支付的一些行为，如金额，商品简介等信息。实现的抽象类如以下定义：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.pay&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/20.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Payment&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;pay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
这样就定义了支付方式的行为，剩下的就由不同的支付方式来进行实现，比如支付宝支付、微信支付，示例代码如下：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.pay&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/20.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AliPay&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;pay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"AliPay"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WechatPay&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;pay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"WechatPay"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
要是再增加一种支付方式则可以实现Payment接口进行实现就可以了，一般情况下会有一个维护支付方式的常量类，由它来维护可用的支付方式。这个常量类的简化代码如下：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.pay&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/20.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;PayType&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="n"&gt;ALI_PAY&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AliPay&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt;
      &lt;span class="n"&gt;WECHAT_PAY&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WechatPay&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt;
      &lt;span class="n"&gt;JD_PAY&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JdPay&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt;
      &lt;span class="n"&gt;UNICOME_PAY&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;UnicomePay&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt;
      &lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt; &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="n"&gt;PayType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Payment&lt;/span&gt; &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Payment&lt;/span&gt; &lt;span class="nf"&gt;getPayment&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在常量类可以获取要支付的具体支付方式来进行支付。接下来进行一下测试：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.pay&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/6/20.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PayTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	  &lt;span class="n"&gt;PayType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ALI_PAY&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPayment&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;pay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"123"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

	  &lt;span class="n"&gt;PayType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PayType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WECHAT_PAY&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;getPayment&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;pay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"325"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面的测试会输出
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="n"&gt;AliPay&lt;/span&gt;
  &lt;span class="n"&gt;WechatPay&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
这样一个简单的策略模式就实现了。
策略模式的类图如下:
&lt;img src="http://blog.imcompany.cn/images/strategy.png" alt="策略模式"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org842d45e" class="outline-2"&gt;
&lt;h2 id="org842d45e"&gt;&lt;a id="ID-16BB8D9F-AFFD-4584-A8AF-4FE7A9526414"&gt;&lt;/a&gt;策略设计模式总结&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org842d45e"&gt;
&lt;p&gt;
策略模式是一种行为类型的设计模式，它封装了不同的行为，给使用者提供几种选择来实现结果。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1bbc203" class="outline-3"&gt;
&lt;h3 id="org1bbc203"&gt;&lt;a id="ID-C88F8F41-AB48-473B-AD0E-37882FC3286A"&gt;&lt;/a&gt;优点&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1bbc203"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;再增加新的支付方式只需要增加实现类即可，不需要修改现在支付方式的实现逻辑。符合开闭原则。&lt;/li&gt;
&lt;li&gt;在选择行为时避免了很多的if-else的判断。使代码更加清晰。&lt;/li&gt;
&lt;li&gt;策略模式提供了统一的管理行为的方式。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge633fa4" class="outline-3"&gt;
&lt;h3 id="orge633fa4"&gt;&lt;a id="ID-54C00A2D-6087-453A-AFF6-E52FCCE3692F"&gt;&lt;/a&gt;缺点&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge633fa4"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;无法一起使用多个策略类。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-ce-lue-mo-shi/</guid><pubDate>Tue, 19 Jun 2018 23:04:56 GMT</pubDate></item><item><title>设计模式学习之工厂模式</title><link>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-gong-han-mo-shi/</link><dc:creator>Tomyli</dc:creator><description>&lt;div id="outline-container-org9251d14" class="outline-2"&gt;
&lt;h2 id="org9251d14"&gt;&lt;a id="ID-A489BC67-1105-4C33-9727-7D7161A13BAC"&gt;&lt;/a&gt;说明&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9251d14"&gt;
&lt;p&gt;
工厂设计模式是23种设计模式中使用频率非常高的，属于创建型模式。主要特点是实现了实体创建与使用的分离，达到了解耦的目的。工厂设计模式一般分为简单工厂、工厂方法、抽象工厂。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0d8c8b6" class="outline-2"&gt;
&lt;h2 id="org0d8c8b6"&gt;&lt;a id="ID-F033B640-6EEF-450F-8D8A-DC8B37F4BA15"&gt;&lt;/a&gt;前提准备&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0d8c8b6"&gt;
&lt;p&gt;
4年一界世界杯即将到来，啤酒厂商又要大嫌一笔。我们先准备好要生产的啤酒实体。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/5/27.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Beer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JinShiBai&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"金士百"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QingDao&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"青岛"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaiWei&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"百威"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在上面定义三种啤酒，它们都由抽象类Beer继承而来。下面使用简单工厂来给消费者提供啤酒。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0e475e1" class="outline-2"&gt;
&lt;h2 id="org0e475e1"&gt;&lt;a id="ID-79BAB320-4A93-4697-8782-D8B5D223C10F"&gt;&lt;/a&gt;简单工厂&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0e475e1"&gt;
&lt;p&gt;
消费者需要不同品类的啤酒，使用简单工厂来实现，代码如下：
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf1269de" class="outline-3"&gt;
&lt;h3 id="orgf1269de"&gt;&lt;a id="ID-2D775EDD-05B6-4105-8FAF-F2F217155C3D"&gt;&lt;/a&gt;简单工厂生产啤酒&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf1269de"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.simple&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.BaiWei&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.Beer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.JinShiBai&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.QingDao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * 一个工厂什么都生产,根据传入的参数来返回不同的产品&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/5/28.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getBeer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"青岛"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;QingDao&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"百威"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BaiWei&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"金士百"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JinShiBai&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"没有这种啤酒"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
	  &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在上面的代码简单工厂会根据传入的啤酒名称来生产出不同的啤酒。下面来测试一下这个简单工厂
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.simple&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/5/28.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleFactoryTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SimpleFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBeer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"青岛"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
现在消费者可以喝到青岛牌子的啤酒了。简单工厂实现实体创建与使用的分离。由于简单工厂一般都会提供静态的获取实体的方法，所以它还会被称为静态工厂。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0dec9f3" class="outline-3"&gt;
&lt;h3 id="org0dec9f3"&gt;&lt;a id="ID-FF168DFF-3DFF-48EF-B90D-551D140C664C"&gt;&lt;/a&gt;简单工厂总结&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0dec9f3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org85ce82c" class="outline-4"&gt;
&lt;h4 id="org85ce82c"&gt;&lt;a id="ID-8FC12473-3775-4590-B649-CF6C7B1937AA"&gt;&lt;/a&gt;优点：&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org85ce82c"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;简单工厂的实现非常简单，把原本由Beer来处理的创建工作给抽离出来，根据传入的参数来进行实体的创建。&lt;/li&gt;
&lt;li&gt;实体的创建完全交给简单工厂来处理，实体什么时候创建对使用者是无感知的。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org18feaa7" class="outline-4"&gt;
&lt;h4 id="org18feaa7"&gt;&lt;a id="ID-A7B3921B-C7B3-43D8-B21C-CA62A227DFE5"&gt;&lt;/a&gt;缺点&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org18feaa7"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;如果要新增一款啤酒，则要修改工厂类，违反了设计模式中对扩展开放，对修改关闭的原则。&lt;/li&gt;
&lt;li&gt;使用需要记住要使用产品名称，如果传入错误则不会得到正确的结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge02e8d2" class="outline-2"&gt;
&lt;h2 id="orge02e8d2"&gt;&lt;a id="ID-0657E214-34BE-40BB-B34E-5AF2324240FE"&gt;&lt;/a&gt;工厂方法&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge02e8d2"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5799e54" class="outline-3"&gt;
&lt;h3 id="org5799e54"&gt;&lt;a id="ID-71E14835-E5EF-4B6A-9218-31C060A30B12"&gt;&lt;/a&gt;工厂方法生产啤酒&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5799e54"&gt;
&lt;p&gt;
为了解决简单工厂中的问题，我们引入工厂方法，使用工厂方法，则每一款啤酒对应的都会由一个特定的工厂来进行生产，这些工厂统一都继承自一个抽象的工厂，由这个抽象的工厂来定义要生产的产品规范。示例代码如下：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * 定义获取的功能，具体由实现类（具体的啤酒厂）来实现，做到创建与使用隔离&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/5/28.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FunctionFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getBeer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaiWeiFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;BeerFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getBeer&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BaiWei&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JinShiBaiFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;BeerFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getBeer&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JinShiBai&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QinDaoFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;BeerFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Override&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getBeer&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;QingDao&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面的代码展示了各种啤酒由不同工厂来生产的情况，每个工厂都继承自BeerFactory这个抽象类，它只定义了生产啤酒这个抽象方法，具体生产什么牌子的啤酒由各个具体工厂来处理。这样在用户使用时就可以指定要哪一家工厂生产的酒就可以了。
下面来测试这种工厂生产的啤酒。
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.function&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;   * Created by tomyli on 2018/5/28.&lt;/span&gt;
&lt;span class="cm"&gt;   * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FunctionFactoryTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	  &lt;span class="n"&gt;BeerFactory&lt;/span&gt; &lt;span class="n"&gt;jinShiBaiFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JinShiBaiFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	  &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jinShiBaiFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBeer&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
上面的代码指定了要用金士百工厂生产的啤酒，实例指向的永远是抽象工厂，这就是所谓的多态，这样我们可以面向抽象来进行编程，而不是面对具体的实现。灵活性与扩展性大大的增加了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga1d8c57" class="outline-3"&gt;
&lt;h3 id="orga1d8c57"&gt;&lt;a id="ID-96E11C62-15DB-4782-9D2A-916DA3D6556B"&gt;&lt;/a&gt;工厂方法总结&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga1d8c57"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfe52618" class="outline-4"&gt;
&lt;h4 id="orgfe52618"&gt;&lt;a id="ID-EF3A557E-B095-497B-ABD8-F822D2C426F2"&gt;&lt;/a&gt;优点&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgfe52618"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;使用者不用记住产品的名称了，只要知道要使用哪家的工厂生产的产品就可以了。&lt;/li&gt;
&lt;li&gt;如果再增加一种啤酒，可以直接增加一个工厂来进行生产，不用修改现有工厂的实现，实现了开闭原则。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4cbdf96" class="outline-4"&gt;
&lt;h4 id="org4cbdf96"&gt;&lt;a id="ID-EAB1BCD7-9486-4310-83CC-441D6D5A7A3F"&gt;&lt;/a&gt;缺点&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4cbdf96"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;类的数目增加了很多，会产生类的膨胀。&lt;/li&gt;
&lt;li&gt;增加一种产品不仅要增加具体的产品类，还要为之提供一个具体的工厂，复杂度增加。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfece36c" class="outline-2"&gt;
&lt;h2 id="orgfece36c"&gt;&lt;a id="ID-5C187197-56E5-4F7F-8723-4E4DA7B6D303"&gt;&lt;/a&gt;抽象工厂&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfece36c"&gt;
&lt;p&gt;
为了解决工厂方法中系统复杂的情况，我们引入抽象工厂，由抽象工厂来定义所要生产的啤酒类型，再由具体的工厂来对这些啤酒进行生产。由于生产的产品都有相似的特征，可以理解为生产一个产品族。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8b2cfbd" class="outline-3"&gt;
&lt;h3 id="org8b2cfbd"&gt;&lt;a id="ID-6E10E898-B8F0-432E-B0BA-51301313D91F"&gt;&lt;/a&gt;抽象工厂生产啤酒&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8b2cfbd"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.abs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.Beer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;    * Created by tomyli on 2018/5/28.&lt;/span&gt;
&lt;span class="cm"&gt;    * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;AbstractBeerFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

       &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getQingDao&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

       &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getBaiWei&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

       &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getJinShiBai&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

   &lt;span class="o"&gt;}&lt;/span&gt;

   &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.abs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.BaiWei&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.Beer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.JinShiBai&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.QingDao&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;    * Created by tomyli on 2018/5/28.&lt;/span&gt;
&lt;span class="cm"&gt;    * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConcreteBeerFactory&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;AbstractBeerFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

       &lt;span class="nd"&gt;@Override&lt;/span&gt;
       &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getQingDao&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;QingDao&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;

       &lt;span class="nd"&gt;@Override&lt;/span&gt;
       &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getBaiWei&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BaiWei&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;

       &lt;span class="nd"&gt;@Override&lt;/span&gt;
       &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Beer&lt;/span&gt; &lt;span class="nf"&gt;getJinShiBai&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JinShiBai&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
这次把生产的三种啤酒都定义在一个抽象工厂中，再由一个具体的工厂来实现所要生产啤酒的功能。我们来测试一下
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;cn.imcompany.abs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;    * Created by tomyli on 2018/5/28.&lt;/span&gt;
&lt;span class="cm"&gt;    * Github: https://github.com/peng051410&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AbstractFactoryTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

       &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	   &lt;span class="n"&gt;AbstractBeerFactory&lt;/span&gt; &lt;span class="n"&gt;beerFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcreteBeerFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
	   &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;beerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBaiWei&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;

   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
在测试类中实例化一个具体的工厂，然后调用工厂中生产具体酒的方法就可以得到正确的商品，使用者无须记住多个工厂，只要一个工厂就可以满足需要。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org44057f0" class="outline-3"&gt;
&lt;h3 id="org44057f0"&gt;&lt;a id="ID-428207FB-8DE3-4F1F-B429-946F6DC17AFF"&gt;&lt;/a&gt;抽象工厂总结&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org44057f0"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga564f13" class="outline-4"&gt;
&lt;h4 id="orga564f13"&gt;&lt;a id="ID-D904C553-3369-4082-BE4E-59126A570A5D"&gt;&lt;/a&gt;优点&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga564f13"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;类的数量精简了，当需要一个产品族来进行操作时，它可以保证客户端使用了同一产品族中的对象&lt;/li&gt;
&lt;li&gt;当需要新增加一种产品族时（换其它工厂来生产），无须修改系统，直接新建一个具体的工厂就可以实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcb284e0" class="outline-4"&gt;
&lt;h4 id="orgcb284e0"&gt;&lt;a id="ID-D7E23F6B-206A-4FF5-9F48-4D192E8956B3"&gt;&lt;/a&gt;缺点&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcb284e0"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;当需要增加新的产品类型时，需要修改最高的抽象工厂，这样具体的实现工厂也要进行修改，不符合开闭原则。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
啤酒工厂的类图：
&lt;img src="http://blog.imcompany.cn/images/factory.png" alt="工厂模式"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org65ea28d" class="outline-2"&gt;
&lt;h2 id="org65ea28d"&gt;&lt;a id="ID-A8902F00-18CE-4D7F-A412-A874795E0C48"&gt;&lt;/a&gt;工厂方法与抽象工厂对比&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org65ea28d"&gt;
&lt;p&gt;
上面说的工厂方法与抽象工厂理解时有些困难，它们主要的不同点就是工厂方法适合生产产品结构相同的单种产品，而抽象工厂适合生产多种产品结构的产品，如白酒，这是另一个产品结构，这种情况使用抽象工厂更恰当。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>design pattern</category><category>java</category><guid>http://blog.imcompany.cn/posts/she-ji-mo-shi-xue-xi-zhi-gong-han-mo-shi/</guid><pubDate>Tue, 12 Jun 2018 13:33:40 GMT</pubDate></item></channel></rss>